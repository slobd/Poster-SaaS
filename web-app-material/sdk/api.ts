/* tslint:disable */
/* eslint-disable */
/**
 * Posters example
 * The posters API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from './common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface AssigneeDto
 */
export interface AssigneeDto {
    /**
     *
     * @type {number}
     * @memberof AssigneeDto
     */
    id: number
}
/**
 *
 * @export
 * @interface AuthorDto
 */
export interface AuthorDto {
    /**
     *
     * @type {number}
     * @memberof AuthorDto
     */
    id: number
}
/**
 *
 * @export
 * @interface Board
 */
export interface Board {
    /**
     *
     * @type {number}
     * @memberof Board
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof Board
     */
    title: string
    /**
     *
     * @type {number}
     * @memberof Board
     */
    projectId: number
    /**
     *
     * @type {Array<Status>}
     * @memberof Board
     */
    statuses: Array<Status>
    /**
     *
     * @type {Array<Task>}
     * @memberof Board
     */
    tasks: Array<Task>
    /**
     *
     * @type {string}
     * @memberof Board
     */
    createdAt: string
    /**
     *
     * @type {string}
     * @memberof Board
     */
    updatedAt: string
}
/**
 *
 * @export
 * @interface CreateBoardDto
 */
export interface CreateBoardDto {
    /**
     *
     * @type {number}
     * @memberof CreateBoardDto
     */
    projectId: number
    /**
     *
     * @type {string}
     * @memberof CreateBoardDto
     */
    title: string
    /**
     *
     * @type {CreateBoardDtoProject}
     * @memberof CreateBoardDto
     */
    project: CreateBoardDtoProject
    /**
     *
     * @type {Array<CreateBoardDtoTaskStatus>}
     * @memberof CreateBoardDto
     */
    statuses?: Array<CreateBoardDtoTaskStatus>
    /**
     *
     * @type {Array<CreateBoardDtoTask>}
     * @memberof CreateBoardDto
     */
    cards?: Array<CreateBoardDtoTask>
}
/**
 *
 * @export
 * @interface CreateBoardDtoProject
 */
export interface CreateBoardDtoProject {
    /**
     *
     * @type {string}
     * @memberof CreateBoardDtoProject
     */
    visibility: CreateBoardDtoProjectVisibilityEnum
    /**
     *
     * @type {number}
     * @memberof CreateBoardDtoProject
     */
    workspaceId: number
}

export const CreateBoardDtoProjectVisibilityEnum = {
    Public: 'PUBLIC',
    Private: 'PRIVATE',
} as const

export type CreateBoardDtoProjectVisibilityEnum =
    typeof CreateBoardDtoProjectVisibilityEnum[keyof typeof CreateBoardDtoProjectVisibilityEnum]

/**
 *
 * @export
 * @interface CreateBoardDtoTask
 */
export interface CreateBoardDtoTask {
    /**
     *
     * @type {string}
     * @memberof CreateBoardDtoTask
     */
    status: string
    /**
     *
     * @type {string}
     * @memberof CreateBoardDtoTask
     */
    title: string
    /**
     *
     * @type {string}
     * @memberof CreateBoardDtoTask
     */
    description: string
}
/**
 *
 * @export
 * @interface CreateBoardDtoTaskStatus
 */
export interface CreateBoardDtoTaskStatus {
    /**
     *
     * @type {string}
     * @memberof CreateBoardDtoTaskStatus
     */
    name: string
}
/**
 *
 * @export
 * @interface CreateCommentData
 */
export interface CreateCommentData {
    /**
     *
     * @type {string}
     * @memberof CreateCommentData
     */
    content: string
    /**
     *
     * @type {object}
     * @memberof CreateCommentData
     */
    author: object
    /**
     *
     * @type {number}
     * @memberof CreateCommentData
     */
    posterId: number
}
/**
 *
 * @export
 * @interface CreateInviteDto
 */
export interface CreateInviteDto {
    /**
     *
     * @type {string}
     * @memberof CreateInviteDto
     */
    email: string
    /**
     *
     * @type {number}
     * @memberof CreateInviteDto
     */
    roleId: number
    /**
     *
     * @type {number}
     * @memberof CreateInviteDto
     */
    tenantId: number
    /**
     *
     * @type {number}
     * @memberof CreateInviteDto
     */
    workspaceId: number
    /**
     *
     * @type {number}
     * @memberof CreateInviteDto
     */
    projectId: number
}
/**
 *
 * @export
 * @interface CreateLiveSessionDto
 */
export interface CreateLiveSessionDto {
    /**
     *
     * @type {string}
     * @memberof CreateLiveSessionDto
     */
    roomName: string
}
/**
 *
 * @export
 * @interface CreatePosterData
 */
export interface CreatePosterData {
    /**
     *
     * @type {string}
     * @memberof CreatePosterData
     */
    title: string
    /**
     *
     * @type {CreatePosterDataWorkspace}
     * @memberof CreatePosterData
     */
    workspace: CreatePosterDataWorkspace
    /**
     *
     * @type {string}
     * @memberof CreatePosterData
     */
    description?: string
    /**
     *
     * @type {Array<KeywordDto>}
     * @memberof CreatePosterData
     */
    keywords?: Array<KeywordDto>
    /**
     *
     * @type {Array<TopicDto>}
     * @memberof CreatePosterData
     */
    topics?: Array<TopicDto>
    /**
     *
     * @type {object}
     * @memberof CreatePosterData
     */
    visibility: object
    /**
     *
     * @type {Array<AuthorDto>}
     * @memberof CreatePosterData
     */
    authors: Array<AuthorDto>
}
/**
 *
 * @export
 * @interface CreatePosterDataWorkspace
 */
export interface CreatePosterDataWorkspace {
    /**
     *
     * @type {number}
     * @memberof CreatePosterDataWorkspace
     */
    id: number
    /**
     *
     * @type {number}
     * @memberof CreatePosterDataWorkspace
     */
    tenantId: number
}
/**
 *
 * @export
 * @interface CreatePosterDto
 */
export interface CreatePosterDto {
    /**
     * .jpeg file
     * @type {any}
     * @memberof CreatePosterDto
     */
    image: any
    /**
     * .pdf file
     * @type {any}
     * @memberof CreatePosterDto
     */
    pdf: any
    /**
     *
     * @type {CreatePosterDtoData}
     * @memberof CreatePosterDto
     */
    data: CreatePosterDtoData
}
/**
 * Schema: CreatePosterData
 * @export
 * @interface CreatePosterDtoData
 */
export interface CreatePosterDtoData {
    /**
     *
     * @type {string}
     * @memberof CreatePosterDtoData
     */
    title: string
    /**
     *
     * @type {CreatePosterDataWorkspace}
     * @memberof CreatePosterDtoData
     */
    workspace: CreatePosterDataWorkspace
    /**
     *
     * @type {string}
     * @memberof CreatePosterDtoData
     */
    description?: string
    /**
     *
     * @type {Array<KeywordDto>}
     * @memberof CreatePosterDtoData
     */
    keywords?: Array<KeywordDto>
    /**
     *
     * @type {Array<TopicDto>}
     * @memberof CreatePosterDtoData
     */
    topics?: Array<TopicDto>
    /**
     *
     * @type {object}
     * @memberof CreatePosterDtoData
     */
    visibility: object
    /**
     *
     * @type {Array<AuthorDto>}
     * @memberof CreatePosterDtoData
     */
    authors: Array<AuthorDto>
}
/**
 *
 * @export
 * @interface CreateProjectDto
 */
export interface CreateProjectDto {
    /**
     *
     * @type {string}
     * @memberof CreateProjectDto
     */
    name: string
    /**
     *
     * @type {number}
     * @memberof CreateProjectDto
     */
    workspaceId: number
    /**
     *
     * @type {number}
     * @memberof CreateProjectDto
     */
    tenantId: number
}
/**
 *
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
    /**
     *
     * @type {string}
     * @memberof CreateRoleDto
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof CreateRoleDto
     */
    domain: string
    /**
     *
     * @type {string}
     * @memberof CreateRoleDto
     */
    description: string
    /**
     *
     * @type {Array<CreateRuleDto>}
     * @memberof CreateRoleDto
     */
    rules: Array<CreateRuleDto>
}
/**
 *
 * @export
 * @interface CreateRuleDto
 */
export interface CreateRuleDto {
    /**
     *
     * @type {string}
     * @memberof CreateRuleDto
     */
    feature: string
    /**
     *
     * @type {string}
     * @memberof CreateRuleDto
     */
    name: string
    /**
     *
     * @type {object}
     * @memberof CreateRuleDto
     */
    options: object
    /**
     *
     * @type {number}
     * @memberof CreateRuleDto
     */
    userId?: number
}
/**
 *
 * @export
 * @interface CreateTaskDto
 */
export interface CreateTaskDto {
    /**
     *
     * @type {string}
     * @memberof CreateTaskDto
     */
    title: string
    /**
     *
     * @type {string}
     * @memberof CreateTaskDto
     */
    description: string
    /**
     *
     * @type {number}
     * @memberof CreateTaskDto
     */
    statusId: number
    /**
     *
     * @type {CreateTaskDtoBoard}
     * @memberof CreateTaskDto
     */
    board: CreateTaskDtoBoard
}
/**
 *
 * @export
 * @interface CreateTaskDtoBoard
 */
export interface CreateTaskDtoBoard {
    /**
     *
     * @type {CreateTaskDtoProject}
     * @memberof CreateTaskDtoBoard
     */
    project: CreateTaskDtoProject
    /**
     *
     * @type {number}
     * @memberof CreateTaskDtoBoard
     */
    tenantId: number
    /**
     *
     * @type {number}
     * @memberof CreateTaskDtoBoard
     */
    id: number
}
/**
 *
 * @export
 * @interface CreateTaskDtoProject
 */
export interface CreateTaskDtoProject {
    /**
     *
     * @type {string}
     * @memberof CreateTaskDtoProject
     */
    visibility: CreateTaskDtoProjectVisibilityEnum
    /**
     *
     * @type {number}
     * @memberof CreateTaskDtoProject
     */
    workspaceId: number
}

export const CreateTaskDtoProjectVisibilityEnum = {
    Public: 'PUBLIC',
    Private: 'PRIVATE',
} as const

export type CreateTaskDtoProjectVisibilityEnum =
    typeof CreateTaskDtoProjectVisibilityEnum[keyof typeof CreateTaskDtoProjectVisibilityEnum]

/**
 *
 * @export
 * @interface CreateTenantAppDto
 */
export interface CreateTenantAppDto {
    /**
     *
     * @type {string}
     * @memberof CreateTenantAppDto
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof CreateTenantAppDto
     */
    host: string
    /**
     *
     * @type {Upload}
     * @memberof CreateTenantAppDto
     */
    logo?: Upload
    /**
     *
     * @type {string}
     * @memberof CreateTenantAppDto
     */
    domain: string | null
}
/**
 *
 * @export
 * @interface CreateTenantDto
 */
export interface CreateTenantDto {
    /**
     *
     * @type {TenantSuperadmin}
     * @memberof CreateTenantDto
     */
    superadmin: TenantSuperadmin
    /**
     *
     * @type {string}
     * @memberof CreateTenantDto
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof CreateTenantDto
     */
    host: string
    /**
     *
     * @type {TenantFeatures}
     * @memberof CreateTenantDto
     */
    features?: TenantFeatures
    /**
     *
     * @type {number}
     * @memberof CreateTenantDto
     */
    themeId: number
    /**
     *
     * @type {boolean}
     * @memberof CreateTenantDto
     */
    enabled: boolean
    /**
     *
     * @type {Upload}
     * @memberof CreateTenantDto
     */
    logo?: Upload
    /**
     *
     * @type {string}
     * @memberof CreateTenantDto
     */
    domain: string | null
}
/**
 *
 * @export
 * @interface CreateWorkspaceDto
 */
export interface CreateWorkspaceDto {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceDto
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceDto
     */
    description: string
    /**
     *
     * @type {object}
     * @memberof CreateWorkspaceDto
     */
    visibility: object
    /**
     *
     * @type {number}
     * @memberof CreateWorkspaceDto
     */
    tenantId: number
}
/**
 *
 * @export
 * @interface GenerateJWTTokenDto
 */
export interface GenerateJWTTokenDto {
    /**
     *
     * @type {string}
     * @memberof GenerateJWTTokenDto
     */
    slug: string
}
/**
 *
 * @export
 * @interface Keyword
 */
export interface Keyword {
    /**
     *
     * @type {string}
     * @memberof Keyword
     */
    name: string
}
/**
 *
 * @export
 * @interface KeywordDto
 */
export interface KeywordDto {
    /**
     *
     * @type {string}
     * @memberof KeywordDto
     */
    name: string
}
/**
 *
 * @export
 * @interface NewsletterDto
 */
export interface NewsletterDto {
    /**
     *
     * @type {string}
     * @memberof NewsletterDto
     */
    email: string
}
/**
 *
 * @export
 * @interface Poster
 */
export interface Poster {
    /**
     *
     * @type {number}
     * @memberof Poster
     */
    id: number
    /**
     *
     * @type {User}
     * @memberof Poster
     */
    user?: User
    /**
     *
     * @type {number}
     * @memberof Poster
     */
    userId: number
    /**
     *
     * @type {number}
     * @memberof Poster
     */
    workspaceId: number
    /**
     *
     * @type {Array<object>}
     * @memberof Poster
     */
    comments?: Array<object>
    /**
     *
     * @type {string}
     * @memberof Poster
     */
    title: string
    /**
     *
     * @type {string}
     * @memberof Poster
     */
    description: string
    /**
     *
     * @type {object}
     * @memberof Poster
     */
    pdf: object
    /**
     *
     * @type {number}
     * @memberof Poster
     */
    pdfId: number
    /**
     *
     * @type {object}
     * @memberof Poster
     */
    image: object
    /**
     *
     * @type {number}
     * @memberof Poster
     */
    imageId: number
    /**
     *
     * @type {object}
     * @memberof Poster
     */
    visibility: object
    /**
     *
     * @type {Array<Keyword>}
     * @memberof Poster
     */
    keywords: Array<Keyword>
    /**
     *
     * @type {Array<Topic>}
     * @memberof Poster
     */
    topics: Array<Topic>
    /**
     *
     * @type {Array<object>}
     * @memberof Poster
     */
    authors: Array<object>
    /**
     *
     * @type {string}
     * @memberof Poster
     */
    createdAt: string
    /**
     *
     * @type {string}
     * @memberof Poster
     */
    updatedAt: string
}
/**
 *
 * @export
 * @interface PosterUpdateUploadDto
 */
export interface PosterUpdateUploadDto {
    /**
     *
     * @type {number}
     * @memberof PosterUpdateUploadDto
     */
    id: number
}
/**
 *
 * @export
 * @interface SanitizedExpertDto
 */
export interface SanitizedExpertDto {
    /**
     *
     * @type {number}
     * @memberof SanitizedExpertDto
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    objectId: string
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    organizationName: string | null
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    firstName: string
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    lastName: string
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    email: string
    /**
     *
     * @type {boolean}
     * @memberof SanitizedExpertDto
     */
    isDummyUser: boolean
    /**
     *
     * @type {boolean}
     * @memberof SanitizedExpertDto
     */
    disableNotifications: boolean
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    linkedin: string
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    researchGate: string
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    twitter: string
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    currentPosition: string | null
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    biography: string | null
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    createdAt: string
    /**
     *
     * @type {string}
     * @memberof SanitizedExpertDto
     */
    updatedAt: string
    /**
     *
     * @type {number}
     * @memberof SanitizedExpertDto
     */
    avatarId: number | null
    /**
     *
     * @type {Upload}
     * @memberof SanitizedExpertDto
     */
    avatar?: Upload
    /**
     *
     * @type {Array<object>}
     * @memberof SanitizedExpertDto
     */
    authoredPosters?: Array<object>
    /**
     *
     * @type {Array<object>}
     * @memberof SanitizedExpertDto
     */
    roles?: Array<object>
    /**
     *
     * @type {Array<object>}
     * @memberof SanitizedExpertDto
     */
    comments?: Array<object>
    /**
     *
     * @type {object}
     * @memberof SanitizedExpertDto
     */
    userDirectory?: object
    /**
     *
     * @type {Array<object>}
     * @memberof SanitizedExpertDto
     */
    skills?: Array<object>
}
/**
 *
 * @export
 * @interface SendMessageDto
 */
export interface SendMessageDto {
    /**
     *
     * @type {string}
     * @memberof SendMessageDto
     */
    message: string
}
/**
 *
 * @export
 * @interface SkillDto
 */
export interface SkillDto {
    /**
     *
     * @type {string}
     * @memberof SkillDto
     */
    name: string
}
/**
 *
 * @export
 * @interface Status
 */
export interface Status {
    /**
     *
     * @type {number}
     * @memberof Status
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof Status
     */
    name: string
    /**
     *
     * @type {number}
     * @memberof Status
     */
    boardId: number
    /**
     *
     * @type {string}
     * @memberof Status
     */
    createdAt: string
    /**
     *
     * @type {string}
     * @memberof Status
     */
    updatedAt: string
}
/**
 *
 * @export
 * @interface Task
 */
export interface Task {
    /**
     *
     * @type {number}
     * @memberof Task
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof Task
     */
    title: string
    /**
     *
     * @type {string}
     * @memberof Task
     */
    description: string
    /**
     *
     * @type {Status}
     * @memberof Task
     */
    status: Status
    /**
     *
     * @type {object}
     * @memberof Task
     */
    positionByStatus: object
    /**
     *
     * @type {Array<object>}
     * @memberof Task
     */
    attachments: Array<object>
    /**
     *
     * @type {Array<User>}
     * @memberof Task
     */
    assignees: Array<User>
    /**
     *
     * @type {string}
     * @memberof Task
     */
    dueDate: string
    /**
     *
     * @type {string}
     * @memberof Task
     */
    createdAt: string
    /**
     *
     * @type {string}
     * @memberof Task
     */
    updatedAt: string
}
/**
 *
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     *
     * @type {number}
     * @memberof Tenant
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    host: string
    /**
     *
     * @type {Array<object>}
     * @memberof Tenant
     */
    roles?: Array<object>
    /**
     *
     * @type {number}
     * @memberof Tenant
     */
    themeId: number
    /**
     *
     * @type {Upload}
     * @memberof Tenant
     */
    logo?: Upload
    /**
     *
     * @type {number}
     * @memberof Tenant
     */
    logoId: number | null
    /**
     *
     * @type {number}
     * @memberof Tenant
     */
    ownerId: number
    /**
     *
     * @type {boolean}
     * @memberof Tenant
     */
    termOfUse: boolean
    /**
     *
     * @type {boolean}
     * @memberof Tenant
     */
    enabled: boolean
    /**
     *
     * @type {TenantFeatures}
     * @memberof Tenant
     */
    features?: TenantFeatures
    /**
     *
     * @type {TenantTheme}
     * @memberof Tenant
     */
    theme?: TenantTheme
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    createdAt: string
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    updatedAt: string
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    domain: string | null
}
/**
 *
 * @export
 * @interface TenantFeatures
 */
export interface TenantFeatures {
    /**
     *
     * @type {number}
     * @memberof TenantFeatures
     */
    id?: number
    /**
     *
     * @type {boolean}
     * @memberof TenantFeatures
     */
    AccessControl: boolean
    /**
     *
     * @type {boolean}
     * @memberof TenantFeatures
     */
    TenantManagement: boolean
    /**
     *
     * @type {boolean}
     * @memberof TenantFeatures
     */
    Workspace: boolean
    /**
     *
     * @type {boolean}
     * @memberof TenantFeatures
     */
    Project: boolean
    /**
     *
     * @type {boolean}
     * @memberof TenantFeatures
     */
    Gallery: boolean
    /**
     *
     * @type {boolean}
     * @memberof TenantFeatures
     */
    People: boolean
    /**
     *
     * @type {boolean}
     * @memberof TenantFeatures
     */
    Comment: boolean
    /**
     *
     * @type {Tenant}
     * @memberof TenantFeatures
     */
    tenant?: Tenant
}
/**
 *
 * @export
 * @interface TenantSuperadmin
 */
export interface TenantSuperadmin {
    /**
     *
     * @type {string}
     * @memberof TenantSuperadmin
     */
    firstName: string
    /**
     *
     * @type {string}
     * @memberof TenantSuperadmin
     */
    lastName: string
    /**
     *
     * @type {string}
     * @memberof TenantSuperadmin
     */
    email: string
}
/**
 *
 * @export
 * @interface TenantTheme
 */
export interface TenantTheme {
    /**
     *
     * @type {number}
     * @memberof TenantTheme
     */
    id?: number
    /**
     *
     * @type {string}
     * @memberof TenantTheme
     */
    tenantId?: string
    /**
     *
     * @type {string}
     * @memberof TenantTheme
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof TenantTheme
     */
    host: string
    /**
     *
     * @type {string}
     * @memberof TenantTheme
     */
    domain: string
    /**
     *
     * @type {boolean}
     * @memberof TenantTheme
     */
    enabled: boolean
    /**
     *
     * @type {TenantSuperadmin}
     * @memberof TenantTheme
     */
    superadmin: TenantSuperadmin
    /**
     *
     * @type {object}
     * @memberof TenantTheme
     */
    features: object
    /**
     *
     * @type {object}
     * @memberof TenantTheme
     */
    images: object
    /**
     *
     * @type {object}
     * @memberof TenantTheme
     */
    css: object
}
/**
 *
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     *
     * @type {string}
     * @memberof Topic
     */
    name: string
}
/**
 *
 * @export
 * @interface TopicDto
 */
export interface TopicDto {
    /**
     *
     * @type {string}
     * @memberof TopicDto
     */
    name: string
}
/**
 *
 * @export
 * @interface UpdateBoardDto
 */
export interface UpdateBoardDto {
    /**
     *
     * @type {number}
     * @memberof UpdateBoardDto
     */
    projectId?: number
    /**
     *
     * @type {string}
     * @memberof UpdateBoardDto
     */
    title?: string
    /**
     *
     * @type {CreateBoardDtoProject}
     * @memberof UpdateBoardDto
     */
    project?: CreateBoardDtoProject
    /**
     *
     * @type {Array<CreateBoardDtoTaskStatus>}
     * @memberof UpdateBoardDto
     */
    statuses?: Array<CreateBoardDtoTaskStatus>
    /**
     *
     * @type {Array<CreateBoardDtoTask>}
     * @memberof UpdateBoardDto
     */
    cards?: Array<CreateBoardDtoTask>
}
/**
 *
 * @export
 * @interface UpdateInformationTabDto
 */
export interface UpdateInformationTabDto {
    /**
     *
     * @type {number}
     * @memberof UpdateInformationTabDto
     */
    id?: number
    /**
     *
     * @type {string}
     * @memberof UpdateInformationTabDto
     */
    description?: string
    /**
     *
     * @type {Array<object>}
     * @memberof UpdateInformationTabDto
     */
    topics?: Array<object>
    /**
     *
     * @type {Array<object>}
     * @memberof UpdateInformationTabDto
     */
    keywords?: Array<object>
    /**
     *
     * @type {Array<object>}
     * @memberof UpdateInformationTabDto
     */
    attachments?: Array<object>
}
/**
 *
 * @export
 * @interface UpdatePosterData
 */
export interface UpdatePosterData {
    /**
     *
     * @type {PosterUpdateUploadDto}
     * @memberof UpdatePosterData
     */
    pdf?: PosterUpdateUploadDto
    /**
     *
     * @type {PosterUpdateUploadDto}
     * @memberof UpdatePosterData
     */
    image?: PosterUpdateUploadDto
    /**
     *
     * @type {string}
     * @memberof UpdatePosterData
     */
    title?: string
    /**
     *
     * @type {CreatePosterDataWorkspace}
     * @memberof UpdatePosterData
     */
    workspace?: CreatePosterDataWorkspace
    /**
     *
     * @type {string}
     * @memberof UpdatePosterData
     */
    description?: string
    /**
     *
     * @type {Array<KeywordDto>}
     * @memberof UpdatePosterData
     */
    keywords?: Array<KeywordDto>
    /**
     *
     * @type {Array<TopicDto>}
     * @memberof UpdatePosterData
     */
    topics?: Array<TopicDto>
    /**
     *
     * @type {object}
     * @memberof UpdatePosterData
     */
    visibility?: object
    /**
     *
     * @type {Array<AuthorDto>}
     * @memberof UpdatePosterData
     */
    authors?: Array<AuthorDto>
}
/**
 *
 * @export
 * @interface UpdatePosterDto
 */
export interface UpdatePosterDto {
    /**
     * .jpeg file
     * @type {any}
     * @memberof UpdatePosterDto
     */
    image: any
    /**
     * .pdf file
     * @type {any}
     * @memberof UpdatePosterDto
     */
    pdf: any
    /**
     *
     * @type {UpdatePosterDtoData}
     * @memberof UpdatePosterDto
     */
    data: UpdatePosterDtoData
}
/**
 * Schema: UpdatePosterData
 * @export
 * @interface UpdatePosterDtoData
 */
export interface UpdatePosterDtoData {
    /**
     *
     * @type {PosterUpdateUploadDto}
     * @memberof UpdatePosterDtoData
     */
    pdf?: PosterUpdateUploadDto
    /**
     *
     * @type {PosterUpdateUploadDto}
     * @memberof UpdatePosterDtoData
     */
    image?: PosterUpdateUploadDto
    /**
     *
     * @type {string}
     * @memberof UpdatePosterDtoData
     */
    title?: string
    /**
     *
     * @type {CreatePosterDataWorkspace}
     * @memberof UpdatePosterDtoData
     */
    workspace?: CreatePosterDataWorkspace
    /**
     *
     * @type {string}
     * @memberof UpdatePosterDtoData
     */
    description?: string
    /**
     *
     * @type {Array<KeywordDto>}
     * @memberof UpdatePosterDtoData
     */
    keywords?: Array<KeywordDto>
    /**
     *
     * @type {Array<TopicDto>}
     * @memberof UpdatePosterDtoData
     */
    topics?: Array<TopicDto>
    /**
     *
     * @type {object}
     * @memberof UpdatePosterDtoData
     */
    visibility?: object
    /**
     *
     * @type {Array<AuthorDto>}
     * @memberof UpdatePosterDtoData
     */
    authors?: Array<AuthorDto>
}
/**
 *
 * @export
 * @interface UpdateProfileData
 */
export interface UpdateProfileData {
    /**
     *
     * @type {string}
     * @memberof UpdateProfileData
     */
    firstName?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileData
     */
    lastName?: string
    /**
     *
     * @type {boolean}
     * @memberof UpdateProfileData
     */
    disableNotifications?: boolean
    /**
     *
     * @type {string}
     * @memberof UpdateProfileData
     */
    linkedin?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileData
     */
    researchGate?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileData
     */
    twitter?: string
    /**
     *
     * @type {Array<SkillDto>}
     * @memberof UpdateProfileData
     */
    skills?: Array<SkillDto>
    /**
     *
     * @type {Upload}
     * @memberof UpdateProfileData
     */
    avatar?: Upload
    /**
     *
     * @type {string}
     * @memberof UpdateProfileData
     */
    currentPosition?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileData
     */
    biography?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileData
     */
    organizationName?: string
}
/**
 *
 * @export
 * @interface UpdateProfileDto
 */
export interface UpdateProfileDto {
    /**
     * .jpeg file
     * @type {any}
     * @memberof UpdateProfileDto
     */
    avatar: any
    /**
     *
     * @type {UpdateProfileDtoData}
     * @memberof UpdateProfileDto
     */
    data: UpdateProfileDtoData
}
/**
 * Schema: UpdateProfileData
 * @export
 * @interface UpdateProfileDtoData
 */
export interface UpdateProfileDtoData {
    /**
     *
     * @type {string}
     * @memberof UpdateProfileDtoData
     */
    firstName?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileDtoData
     */
    lastName?: string
    /**
     *
     * @type {boolean}
     * @memberof UpdateProfileDtoData
     */
    disableNotifications?: boolean
    /**
     *
     * @type {string}
     * @memberof UpdateProfileDtoData
     */
    linkedin?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileDtoData
     */
    researchGate?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileDtoData
     */
    twitter?: string
    /**
     *
     * @type {Array<SkillDto>}
     * @memberof UpdateProfileDtoData
     */
    skills?: Array<SkillDto>
    /**
     *
     * @type {Upload}
     * @memberof UpdateProfileDtoData
     */
    avatar?: Upload
    /**
     *
     * @type {string}
     * @memberof UpdateProfileDtoData
     */
    currentPosition?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileDtoData
     */
    biography?: string
    /**
     *
     * @type {string}
     * @memberof UpdateProfileDtoData
     */
    organizationName?: string
}
/**
 *
 * @export
 * @interface UpdateProjectDto
 */
export interface UpdateProjectDto {
    /**
     *
     * @type {number}
     * @memberof UpdateProjectDto
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof UpdateProjectDto
     */
    name: string
    /**
     *
     * @type {object}
     * @memberof UpdateProjectDto
     */
    visibility: object
    /**
     *
     * @type {UpdateInformationTabDto}
     * @memberof UpdateProjectDto
     */
    informationTab: UpdateInformationTabDto
    /**
     *
     * @type {number}
     * @memberof UpdateProjectDto
     */
    tenantId: number
}
/**
 *
 * @export
 * @interface UpdatePublicInviteStatus
 */
export interface UpdatePublicInviteStatus {
    /**
     *
     * @type {boolean}
     * @memberof UpdatePublicInviteStatus
     */
    enabled: boolean
    /**
     *
     * @type {number}
     * @memberof UpdatePublicInviteStatus
     */
    workspaceId: number
}
/**
 *
 * @export
 * @interface UpdateRoleDto
 */
export interface UpdateRoleDto {
    /**
     *
     * @type {number}
     * @memberof UpdateRoleDto
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof UpdateRoleDto
     */
    name?: string
    /**
     *
     * @type {string}
     * @memberof UpdateRoleDto
     */
    domain?: string
    /**
     *
     * @type {string}
     * @memberof UpdateRoleDto
     */
    description?: string
    /**
     *
     * @type {Array<CreateRuleDto>}
     * @memberof UpdateRoleDto
     */
    rules: Array<CreateRuleDto>
}
/**
 *
 * @export
 * @interface UpdateTaskDto
 */
export interface UpdateTaskDto {
    /**
     *
     * @type {string}
     * @memberof UpdateTaskDto
     */
    title?: string
    /**
     *
     * @type {string}
     * @memberof UpdateTaskDto
     */
    description?: string
    /**
     *
     * @type {number}
     * @memberof UpdateTaskDto
     */
    statusId?: number
    /**
     *
     * @type {number}
     * @memberof UpdateTaskDto
     */
    positionByStatus?: number
    /**
     *
     * @type {string}
     * @memberof UpdateTaskDto
     */
    dueDate?: string
    /**
     *
     * @type {Array<AssigneeDto>}
     * @memberof UpdateTaskDto
     */
    assignees?: Array<AssigneeDto>
}
/**
 *
 * @export
 * @interface UpdateTenantDto
 */
export interface UpdateTenantDto {
    /**
     *
     * @type {TenantSuperadmin}
     * @memberof UpdateTenantDto
     */
    superadmin?: TenantSuperadmin
    /**
     *
     * @type {string}
     * @memberof UpdateTenantDto
     */
    name?: string
    /**
     *
     * @type {string}
     * @memberof UpdateTenantDto
     */
    host?: string
    /**
     *
     * @type {TenantFeatures}
     * @memberof UpdateTenantDto
     */
    features?: TenantFeatures
    /**
     *
     * @type {boolean}
     * @memberof UpdateTenantDto
     */
    enabled?: boolean
    /**
     *
     * @type {string}
     * @memberof UpdateTenantDto
     */
    domain?: string | null
}
/**
 *
 * @export
 * @interface UpdateTenantFromWebAppDto
 */
export interface UpdateTenantFromWebAppDto {
    /**
     *
     * @type {string}
     * @memberof UpdateTenantFromWebAppDto
     */
    name: string
}
/**
 *
 * @export
 * @interface UpdateUserRoleDto
 */
export interface UpdateUserRoleDto {
    /**
     *
     * @type {number}
     * @memberof UpdateUserRoleDto
     */
    roleId: number
}
/**
 *
 * @export
 * @interface UpdateWorkspacesDto
 */
export interface UpdateWorkspacesDto {
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspacesDto
     */
    name?: string
    /**
     *
     * @type {string}
     * @memberof UpdateWorkspacesDto
     */
    description?: string
    /**
     *
     * @type {object}
     * @memberof UpdateWorkspacesDto
     */
    visibility?: object
}
/**
 *
 * @export
 * @interface Upload
 */
export interface Upload {
    /**
     *
     * @type {number}
     * @memberof Upload
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    fieldname: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    originalname: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    encoding: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    contentEncoding: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    mimetype: string
    /**
     *
     * @type {number}
     * @memberof Upload
     */
    size: number
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    bucket: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    key: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    acl: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    contentType: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    contentDisposition: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    storageClass: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    serverSideEncryption: string
    /**
     *
     * @type {object}
     * @memberof Upload
     */
    metadata: object
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    location: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    etag: string
    /**
     *
     * @type {string}
     * @memberof Upload
     */
    versionId: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {number}
     * @memberof User
     */
    id: number
    /**
     *
     * @type {string}
     * @memberof User
     */
    objectId: string
    /**
     *
     * @type {string}
     * @memberof User
     */
    organizationName: string | null
    /**
     *
     * @type {string}
     * @memberof User
     */
    firstName: string
    /**
     *
     * @type {string}
     * @memberof User
     */
    lastName: string
    /**
     *
     * @type {string}
     * @memberof User
     */
    email: string
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    isDummyUser: boolean
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    subscribed: boolean
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    privacyPolicy: boolean
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    termOfUse: boolean
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    disableNotifications: boolean
    /**
     *
     * @type {string}
     * @memberof User
     */
    linkedin: string
    /**
     *
     * @type {string}
     * @memberof User
     */
    researchGate: string
    /**
     *
     * @type {string}
     * @memberof User
     */
    twitter: string
    /**
     *
     * @type {string}
     * @memberof User
     */
    currentPosition: string | null
    /**
     *
     * @type {string}
     * @memberof User
     */
    biography: string | null
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdAt: string
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedAt: string
    /**
     *
     * @type {number}
     * @memberof User
     */
    avatarId: number | null
    /**
     *
     * @type {Upload}
     * @memberof User
     */
    avatar?: Upload
    /**
     *
     * @type {Array<object>}
     * @memberof User
     */
    posters?: Array<object>
    /**
     *
     * @type {Array<object>}
     * @memberof User
     */
    authoredPosters?: Array<object>
    /**
     *
     * @type {Array<object>}
     * @memberof User
     */
    roles?: Array<object>
    /**
     *
     * @type {Array<object>}
     * @memberof User
     */
    comments?: Array<object>
    /**
     *
     * @type {object}
     * @memberof User
     */
    userDirectory?: object
    /**
     *
     * @type {Array<object>}
     * @memberof User
     */
    skills?: Array<object>
}

/**
 * AccessControlApi - axios parameter creator
 * @export
 */
export const AccessControlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {CreateRuleDto} createRuleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControlControllerCreateRuleForUser: async (
            id: number,
            createRuleDto: CreateRuleDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accessControlControllerCreateRuleForUser', 'id', id)
            // verify required parameter 'createRuleDto' is not null or undefined
            assertParamExists(
                'accessControlControllerCreateRuleForUser',
                'createRuleDto',
                createRuleDto
            )
            const localVarPath = `/access-control/users/{id}/rules`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createRuleDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} [feature]
         * @param {string} [name]
         * @param {'Poster' | 'Role' | 'User' | 'Tenant' | 'Workspace' | 'Project' | 'Comment' | 'Invite' | 'Task' | 'Board'} [subject]
         * @param {Array<'create' | 'read' | 'list' | 'update' | 'delete' | 'manage' | 'joinBeforeStartData' | 'requestCollaboration' | 'join'>} [action]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControlControllerGetCurrentUserRules: async (
            feature?: string,
            name?: string,
            subject?:
                | 'Poster'
                | 'Role'
                | 'User'
                | 'Tenant'
                | 'Workspace'
                | 'Project'
                | 'Comment'
                | 'Invite'
                | 'Task'
                | 'Board',
            action?: Array<
                | 'create'
                | 'read'
                | 'list'
                | 'update'
                | 'delete'
                | 'manage'
                | 'joinBeforeStartData'
                | 'requestCollaboration'
                | 'join'
            >,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/access-control/users/me/rules`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (feature !== undefined) {
                localVarQueryParameter['feature'] = feature
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject
            }

            if (action) {
                localVarQueryParameter['action'] = action
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControlControllerGetRulesMetadata: async (
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/access-control/rules/metadata`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {string} [feature]
         * @param {string} [name]
         * @param {'Poster' | 'Role' | 'User' | 'Tenant' | 'Workspace' | 'Project' | 'Comment' | 'Invite' | 'Task' | 'Board'} [subject]
         * @param {Array<'create' | 'read' | 'list' | 'update' | 'delete' | 'manage' | 'joinBeforeStartData' | 'requestCollaboration' | 'join'>} [action]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControlControllerGetUserRules: async (
            id: number,
            feature?: string,
            name?: string,
            subject?:
                | 'Poster'
                | 'Role'
                | 'User'
                | 'Tenant'
                | 'Workspace'
                | 'Project'
                | 'Comment'
                | 'Invite'
                | 'Task'
                | 'Board',
            action?: Array<
                | 'create'
                | 'read'
                | 'list'
                | 'update'
                | 'delete'
                | 'manage'
                | 'joinBeforeStartData'
                | 'requestCollaboration'
                | 'join'
            >,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accessControlControllerGetUserRules', 'id', id)
            const localVarPath = `/access-control/users/{id}/rules`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (feature !== undefined) {
                localVarQueryParameter['feature'] = feature
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject
            }

            if (action) {
                localVarQueryParameter['action'] = action
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * AccessControlApi - functional programming interface
 * @export
 */
export const AccessControlApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessControlApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} id
         * @param {CreateRuleDto} createRuleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControlControllerCreateRuleForUser(
            id: number,
            createRuleDto: CreateRuleDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.accessControlControllerCreateRuleForUser(
                    id,
                    createRuleDto,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} [feature]
         * @param {string} [name]
         * @param {'Poster' | 'Role' | 'User' | 'Tenant' | 'Workspace' | 'Project' | 'Comment' | 'Invite' | 'Task' | 'Board'} [subject]
         * @param {Array<'create' | 'read' | 'list' | 'update' | 'delete' | 'manage' | 'joinBeforeStartData' | 'requestCollaboration' | 'join'>} [action]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControlControllerGetCurrentUserRules(
            feature?: string,
            name?: string,
            subject?:
                | 'Poster'
                | 'Role'
                | 'User'
                | 'Tenant'
                | 'Workspace'
                | 'Project'
                | 'Comment'
                | 'Invite'
                | 'Task'
                | 'Board',
            action?: Array<
                | 'create'
                | 'read'
                | 'list'
                | 'update'
                | 'delete'
                | 'manage'
                | 'joinBeforeStartData'
                | 'requestCollaboration'
                | 'join'
            >,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.accessControlControllerGetCurrentUserRules(
                    feature,
                    name,
                    subject,
                    action,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControlControllerGetRulesMetadata(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.accessControlControllerGetRulesMetadata(options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {string} [feature]
         * @param {string} [name]
         * @param {'Poster' | 'Role' | 'User' | 'Tenant' | 'Workspace' | 'Project' | 'Comment' | 'Invite' | 'Task' | 'Board'} [subject]
         * @param {Array<'create' | 'read' | 'list' | 'update' | 'delete' | 'manage' | 'joinBeforeStartData' | 'requestCollaboration' | 'join'>} [action]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControlControllerGetUserRules(
            id: number,
            feature?: string,
            name?: string,
            subject?:
                | 'Poster'
                | 'Role'
                | 'User'
                | 'Tenant'
                | 'Workspace'
                | 'Project'
                | 'Comment'
                | 'Invite'
                | 'Task'
                | 'Board',
            action?: Array<
                | 'create'
                | 'read'
                | 'list'
                | 'update'
                | 'delete'
                | 'manage'
                | 'joinBeforeStartData'
                | 'requestCollaboration'
                | 'join'
            >,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.accessControlControllerGetUserRules(
                    id,
                    feature,
                    name,
                    subject,
                    action,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * AccessControlApi - factory interface
 * @export
 */
export const AccessControlApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = AccessControlApiFp(configuration)
    return {
        /**
         *
         * @param {number} id
         * @param {CreateRuleDto} createRuleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControlControllerCreateRuleForUser(
            id: number,
            createRuleDto: CreateRuleDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .accessControlControllerCreateRuleForUser(id, createRuleDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} [feature]
         * @param {string} [name]
         * @param {'Poster' | 'Role' | 'User' | 'Tenant' | 'Workspace' | 'Project' | 'Comment' | 'Invite' | 'Task' | 'Board'} [subject]
         * @param {Array<'create' | 'read' | 'list' | 'update' | 'delete' | 'manage' | 'joinBeforeStartData' | 'requestCollaboration' | 'join'>} [action]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControlControllerGetCurrentUserRules(
            feature?: string,
            name?: string,
            subject?:
                | 'Poster'
                | 'Role'
                | 'User'
                | 'Tenant'
                | 'Workspace'
                | 'Project'
                | 'Comment'
                | 'Invite'
                | 'Task'
                | 'Board',
            action?: Array<
                | 'create'
                | 'read'
                | 'list'
                | 'update'
                | 'delete'
                | 'manage'
                | 'joinBeforeStartData'
                | 'requestCollaboration'
                | 'join'
            >,
            options?: any
        ): AxiosPromise<Array<object>> {
            return localVarFp
                .accessControlControllerGetCurrentUserRules(feature, name, subject, action, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControlControllerGetRulesMetadata(options?: any): AxiosPromise<void> {
            return localVarFp
                .accessControlControllerGetRulesMetadata(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {string} [feature]
         * @param {string} [name]
         * @param {'Poster' | 'Role' | 'User' | 'Tenant' | 'Workspace' | 'Project' | 'Comment' | 'Invite' | 'Task' | 'Board'} [subject]
         * @param {Array<'create' | 'read' | 'list' | 'update' | 'delete' | 'manage' | 'joinBeforeStartData' | 'requestCollaboration' | 'join'>} [action]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControlControllerGetUserRules(
            id: number,
            feature?: string,
            name?: string,
            subject?:
                | 'Poster'
                | 'Role'
                | 'User'
                | 'Tenant'
                | 'Workspace'
                | 'Project'
                | 'Comment'
                | 'Invite'
                | 'Task'
                | 'Board',
            action?: Array<
                | 'create'
                | 'read'
                | 'list'
                | 'update'
                | 'delete'
                | 'manage'
                | 'joinBeforeStartData'
                | 'requestCollaboration'
                | 'join'
            >,
            options?: any
        ): AxiosPromise<Array<object>> {
            return localVarFp
                .accessControlControllerGetUserRules(id, feature, name, subject, action, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for accessControlControllerCreateRuleForUser operation in AccessControlApi.
 * @export
 * @interface AccessControlApiAccessControlControllerCreateRuleForUserRequest
 */
export interface AccessControlApiAccessControlControllerCreateRuleForUserRequest {
    /**
     *
     * @type {number}
     * @memberof AccessControlApiAccessControlControllerCreateRuleForUser
     */
    readonly id: number

    /**
     *
     * @type {CreateRuleDto}
     * @memberof AccessControlApiAccessControlControllerCreateRuleForUser
     */
    readonly createRuleDto: CreateRuleDto
}

/**
 * Request parameters for accessControlControllerGetCurrentUserRules operation in AccessControlApi.
 * @export
 * @interface AccessControlApiAccessControlControllerGetCurrentUserRulesRequest
 */
export interface AccessControlApiAccessControlControllerGetCurrentUserRulesRequest {
    /**
     *
     * @type {string}
     * @memberof AccessControlApiAccessControlControllerGetCurrentUserRules
     */
    readonly feature?: string

    /**
     *
     * @type {string}
     * @memberof AccessControlApiAccessControlControllerGetCurrentUserRules
     */
    readonly name?: string

    /**
     *
     * @type {'Poster' | 'Role' | 'User' | 'Tenant' | 'Workspace' | 'Project' | 'Comment' | 'Invite' | 'Task' | 'Board'}
     * @memberof AccessControlApiAccessControlControllerGetCurrentUserRules
     */
    readonly subject?:
        | 'Poster'
        | 'Role'
        | 'User'
        | 'Tenant'
        | 'Workspace'
        | 'Project'
        | 'Comment'
        | 'Invite'
        | 'Task'
        | 'Board'

    /**
     *
     * @type {Array<'create' | 'read' | 'list' | 'update' | 'delete' | 'manage' | 'joinBeforeStartData' | 'requestCollaboration' | 'join'>}
     * @memberof AccessControlApiAccessControlControllerGetCurrentUserRules
     */
    readonly action?: Array<
        | 'create'
        | 'read'
        | 'list'
        | 'update'
        | 'delete'
        | 'manage'
        | 'joinBeforeStartData'
        | 'requestCollaboration'
        | 'join'
    >
}

/**
 * Request parameters for accessControlControllerGetUserRules operation in AccessControlApi.
 * @export
 * @interface AccessControlApiAccessControlControllerGetUserRulesRequest
 */
export interface AccessControlApiAccessControlControllerGetUserRulesRequest {
    /**
     *
     * @type {number}
     * @memberof AccessControlApiAccessControlControllerGetUserRules
     */
    readonly id: number

    /**
     *
     * @type {string}
     * @memberof AccessControlApiAccessControlControllerGetUserRules
     */
    readonly feature?: string

    /**
     *
     * @type {string}
     * @memberof AccessControlApiAccessControlControllerGetUserRules
     */
    readonly name?: string

    /**
     *
     * @type {'Poster' | 'Role' | 'User' | 'Tenant' | 'Workspace' | 'Project' | 'Comment' | 'Invite' | 'Task' | 'Board'}
     * @memberof AccessControlApiAccessControlControllerGetUserRules
     */
    readonly subject?:
        | 'Poster'
        | 'Role'
        | 'User'
        | 'Tenant'
        | 'Workspace'
        | 'Project'
        | 'Comment'
        | 'Invite'
        | 'Task'
        | 'Board'

    /**
     *
     * @type {Array<'create' | 'read' | 'list' | 'update' | 'delete' | 'manage' | 'joinBeforeStartData' | 'requestCollaboration' | 'join'>}
     * @memberof AccessControlApiAccessControlControllerGetUserRules
     */
    readonly action?: Array<
        | 'create'
        | 'read'
        | 'list'
        | 'update'
        | 'delete'
        | 'manage'
        | 'joinBeforeStartData'
        | 'requestCollaboration'
        | 'join'
    >
}

/**
 * AccessControlApi - object-oriented interface
 * @export
 * @class AccessControlApi
 * @extends {BaseAPI}
 */
export class AccessControlApi extends BaseAPI {
    /**
     *
     * @param {AccessControlApiAccessControlControllerCreateRuleForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlApi
     */
    public accessControlControllerCreateRuleForUser(
        requestParameters: AccessControlApiAccessControlControllerCreateRuleForUserRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlApiFp(this.configuration)
            .accessControlControllerCreateRuleForUser(
                requestParameters.id,
                requestParameters.createRuleDto,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AccessControlApiAccessControlControllerGetCurrentUserRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlApi
     */
    public accessControlControllerGetCurrentUserRules(
        requestParameters: AccessControlApiAccessControlControllerGetCurrentUserRulesRequest = {},
        options?: AxiosRequestConfig
    ) {
        return AccessControlApiFp(this.configuration)
            .accessControlControllerGetCurrentUserRules(
                requestParameters.feature,
                requestParameters.name,
                requestParameters.subject,
                requestParameters.action,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlApi
     */
    public accessControlControllerGetRulesMetadata(options?: AxiosRequestConfig) {
        return AccessControlApiFp(this.configuration)
            .accessControlControllerGetRulesMetadata(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AccessControlApiAccessControlControllerGetUserRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlApi
     */
    public accessControlControllerGetUserRules(
        requestParameters: AccessControlApiAccessControlControllerGetUserRulesRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlApiFp(this.configuration)
            .accessControlControllerGetUserRules(
                requestParameters.id,
                requestParameters.feature,
                requestParameters.name,
                requestParameters.subject,
                requestParameters.action,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * AccessControlRolesApi - axios parameter creator
 * @export
 */
export const AccessControlRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateRoleDto} createRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreateRole: async (
            createRoleDto: CreateRoleDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createRoleDto' is not null or undefined
            assertParamExists('rolesControllerCreateRole', 'createRoleDto', createRoleDto)
            const localVarPath = `/access-control/roles`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createRoleDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerGetRoles: async (
            domain: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'domain' is not null or undefined
            assertParamExists('rolesControllerGetRoles', 'domain', domain)
            const localVarPath = `/access-control/roles`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {UpdateRoleDto} updateRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdateRole: async (
            updateRoleDto: UpdateRoleDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'updateRoleDto' is not null or undefined
            assertParamExists('rolesControllerUpdateRole', 'updateRoleDto', updateRoleDto)
            const localVarPath = `/access-control/roles`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateRoleDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * AccessControlRolesApi - functional programming interface
 * @export
 */
export const AccessControlRolesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessControlRolesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {CreateRoleDto} createRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerCreateRole(
            createRoleDto: CreateRoleDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerCreateRole(
                createRoleDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerGetRoles(
            domain: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerGetRoles(
                domain,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {UpdateRoleDto} updateRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerUpdateRole(
            updateRoleDto: UpdateRoleDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerUpdateRole(
                updateRoleDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * AccessControlRolesApi - factory interface
 * @export
 */
export const AccessControlRolesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = AccessControlRolesApiFp(configuration)
    return {
        /**
         *
         * @param {CreateRoleDto} createRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreateRole(
            createRoleDto: CreateRoleDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .rolesControllerCreateRole(createRoleDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerGetRoles(domain: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp
                .rolesControllerGetRoles(domain, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {UpdateRoleDto} updateRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdateRole(
            updateRoleDto: UpdateRoleDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .rolesControllerUpdateRole(updateRoleDto, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for rolesControllerCreateRole operation in AccessControlRolesApi.
 * @export
 * @interface AccessControlRolesApiRolesControllerCreateRoleRequest
 */
export interface AccessControlRolesApiRolesControllerCreateRoleRequest {
    /**
     *
     * @type {CreateRoleDto}
     * @memberof AccessControlRolesApiRolesControllerCreateRole
     */
    readonly createRoleDto: CreateRoleDto
}

/**
 * Request parameters for rolesControllerGetRoles operation in AccessControlRolesApi.
 * @export
 * @interface AccessControlRolesApiRolesControllerGetRolesRequest
 */
export interface AccessControlRolesApiRolesControllerGetRolesRequest {
    /**
     *
     * @type {string}
     * @memberof AccessControlRolesApiRolesControllerGetRoles
     */
    readonly domain: string
}

/**
 * Request parameters for rolesControllerUpdateRole operation in AccessControlRolesApi.
 * @export
 * @interface AccessControlRolesApiRolesControllerUpdateRoleRequest
 */
export interface AccessControlRolesApiRolesControllerUpdateRoleRequest {
    /**
     *
     * @type {UpdateRoleDto}
     * @memberof AccessControlRolesApiRolesControllerUpdateRole
     */
    readonly updateRoleDto: UpdateRoleDto
}

/**
 * AccessControlRolesApi - object-oriented interface
 * @export
 * @class AccessControlRolesApi
 * @extends {BaseAPI}
 */
export class AccessControlRolesApi extends BaseAPI {
    /**
     *
     * @param {AccessControlRolesApiRolesControllerCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlRolesApi
     */
    public rolesControllerCreateRole(
        requestParameters: AccessControlRolesApiRolesControllerCreateRoleRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlRolesApiFp(this.configuration)
            .rolesControllerCreateRole(requestParameters.createRoleDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AccessControlRolesApiRolesControllerGetRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlRolesApi
     */
    public rolesControllerGetRoles(
        requestParameters: AccessControlRolesApiRolesControllerGetRolesRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlRolesApiFp(this.configuration)
            .rolesControllerGetRoles(requestParameters.domain, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AccessControlRolesApiRolesControllerUpdateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlRolesApi
     */
    public rolesControllerUpdateRole(
        requestParameters: AccessControlRolesApiRolesControllerUpdateRoleRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlRolesApiFp(this.configuration)
            .rolesControllerUpdateRole(requestParameters.updateRoleDto, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * AccessControlUserRolesApi - axios parameter creator
 * @export
 */
export const AccessControlUserRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerDeleteRoleFromUser: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRolesControllerDeleteRoleFromUser', 'id', id)
            const localVarPath = `/access-control/users/{id}/roles`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGetRolesOfCurrentUser: async (
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/access-control/users/me`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGetRolesOfUser: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRolesControllerGetRolesOfUser', 'id', id)
            const localVarPath = `/access-control/users/{id}/roles`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGiveRoleToUser: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRolesControllerGiveRoleToUser', 'id', id)
            const localVarPath = `/access-control/users/{id}/roles`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerUpdateRoleOfUser: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRolesControllerUpdateRoleOfUser', 'id', id)
            const localVarPath = `/access-control/users/{id}/roles`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * AccessControlUserRolesApi - functional programming interface
 * @export
 */
export const AccessControlUserRolesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessControlUserRolesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerDeleteRoleFromUser(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.usersRolesControllerDeleteRoleFromUser(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerGetRolesOfCurrentUser(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.usersRolesControllerGetRolesOfCurrentUser(options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerGetRolesOfUser(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.usersRolesControllerGetRolesOfUser(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerGiveRoleToUser(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.usersRolesControllerGiveRoleToUser(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerUpdateRoleOfUser(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.usersRolesControllerUpdateRoleOfUser(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * AccessControlUserRolesApi - factory interface
 * @export
 */
export const AccessControlUserRolesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = AccessControlUserRolesApiFp(configuration)
    return {
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerDeleteRoleFromUser(id: number, options?: any): AxiosPromise<object> {
            return localVarFp
                .usersRolesControllerDeleteRoleFromUser(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGetRolesOfCurrentUser(options?: any): AxiosPromise<Array<object>> {
            return localVarFp
                .usersRolesControllerGetRolesOfCurrentUser(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGetRolesOfUser(id: number, options?: any): AxiosPromise<Array<object>> {
            return localVarFp
                .usersRolesControllerGetRolesOfUser(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGiveRoleToUser(id: number, options?: any): AxiosPromise<void> {
            return localVarFp
                .usersRolesControllerGiveRoleToUser(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerUpdateRoleOfUser(id: number, options?: any): AxiosPromise<void> {
            return localVarFp
                .usersRolesControllerUpdateRoleOfUser(id, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for usersRolesControllerDeleteRoleFromUser operation in AccessControlUserRolesApi.
 * @export
 * @interface AccessControlUserRolesApiUsersRolesControllerDeleteRoleFromUserRequest
 */
export interface AccessControlUserRolesApiUsersRolesControllerDeleteRoleFromUserRequest {
    /**
     *
     * @type {number}
     * @memberof AccessControlUserRolesApiUsersRolesControllerDeleteRoleFromUser
     */
    readonly id: number
}

/**
 * Request parameters for usersRolesControllerGetRolesOfUser operation in AccessControlUserRolesApi.
 * @export
 * @interface AccessControlUserRolesApiUsersRolesControllerGetRolesOfUserRequest
 */
export interface AccessControlUserRolesApiUsersRolesControllerGetRolesOfUserRequest {
    /**
     *
     * @type {number}
     * @memberof AccessControlUserRolesApiUsersRolesControllerGetRolesOfUser
     */
    readonly id: number
}

/**
 * Request parameters for usersRolesControllerGiveRoleToUser operation in AccessControlUserRolesApi.
 * @export
 * @interface AccessControlUserRolesApiUsersRolesControllerGiveRoleToUserRequest
 */
export interface AccessControlUserRolesApiUsersRolesControllerGiveRoleToUserRequest {
    /**
     *
     * @type {number}
     * @memberof AccessControlUserRolesApiUsersRolesControllerGiveRoleToUser
     */
    readonly id: number
}

/**
 * Request parameters for usersRolesControllerUpdateRoleOfUser operation in AccessControlUserRolesApi.
 * @export
 * @interface AccessControlUserRolesApiUsersRolesControllerUpdateRoleOfUserRequest
 */
export interface AccessControlUserRolesApiUsersRolesControllerUpdateRoleOfUserRequest {
    /**
     *
     * @type {number}
     * @memberof AccessControlUserRolesApiUsersRolesControllerUpdateRoleOfUser
     */
    readonly id: number
}

/**
 * AccessControlUserRolesApi - object-oriented interface
 * @export
 * @class AccessControlUserRolesApi
 * @extends {BaseAPI}
 */
export class AccessControlUserRolesApi extends BaseAPI {
    /**
     *
     * @param {AccessControlUserRolesApiUsersRolesControllerDeleteRoleFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlUserRolesApi
     */
    public usersRolesControllerDeleteRoleFromUser(
        requestParameters: AccessControlUserRolesApiUsersRolesControllerDeleteRoleFromUserRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlUserRolesApiFp(this.configuration)
            .usersRolesControllerDeleteRoleFromUser(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlUserRolesApi
     */
    public usersRolesControllerGetRolesOfCurrentUser(options?: AxiosRequestConfig) {
        return AccessControlUserRolesApiFp(this.configuration)
            .usersRolesControllerGetRolesOfCurrentUser(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AccessControlUserRolesApiUsersRolesControllerGetRolesOfUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlUserRolesApi
     */
    public usersRolesControllerGetRolesOfUser(
        requestParameters: AccessControlUserRolesApiUsersRolesControllerGetRolesOfUserRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlUserRolesApiFp(this.configuration)
            .usersRolesControllerGetRolesOfUser(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AccessControlUserRolesApiUsersRolesControllerGiveRoleToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlUserRolesApi
     */
    public usersRolesControllerGiveRoleToUser(
        requestParameters: AccessControlUserRolesApiUsersRolesControllerGiveRoleToUserRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlUserRolesApiFp(this.configuration)
            .usersRolesControllerGiveRoleToUser(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AccessControlUserRolesApiUsersRolesControllerUpdateRoleOfUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessControlUserRolesApi
     */
    public usersRolesControllerUpdateRoleOfUser(
        requestParameters: AccessControlUserRolesApiUsersRolesControllerUpdateRoleOfUserRequest,
        options?: AxiosRequestConfig
    ) {
        return AccessControlUserRolesApiFp(this.configuration)
            .usersRolesControllerUpdateRoleOfUser(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAzureLogin: async (
            code: string,
            error: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('authControllerAzureLogin', 'code', code)
            // verify required parameter 'error' is not null or undefined
            assertParamExists('authControllerAzureLogin', 'error', error)
            const localVarPath = `/auth/redirect-uri`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (code !== undefined) {
                localVarQueryParameter['code'] = code
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAzurePasswordReset: async (
            code: string,
            error: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('authControllerAzurePasswordReset', 'code', code)
            // verify required parameter 'error' is not null or undefined
            assertParamExists('authControllerAzurePasswordReset', 'error', error)
            const localVarPath = `/auth/reset-redirect-uri`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (code !== undefined) {
                localVarQueryParameter['code'] = code
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAzureRegister: async (
            code: string,
            error: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('authControllerAzureRegister', 'code', code)
            // verify required parameter 'error' is not null or undefined
            assertParamExists('authControllerAzureRegister', 'error', error)
            const localVarPath = `/auth/redirect-register-uri`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (code !== undefined) {
                localVarQueryParameter['code'] = code
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile: async (
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {any} avatar .jpeg file
         * @param {UpdateProfileDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerUpdateProfile: async (
            avatar: any,
            data: UpdateProfileDtoData,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'avatar' is not null or undefined
            assertParamExists('authControllerUpdateProfile', 'avatar', avatar)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authControllerUpdateProfile', 'data', data)
            const localVarPath = `/auth/users/profiles`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any
            const localVarFormParams = new ((configuration && configuration.formDataCtor) ||
                FormData)()

            if (avatar !== undefined) {
                localVarFormParams.append('avatar', avatar as any)
            }

            if (data !== undefined) {
                localVarFormParams.append(
                    'data',
                    new Blob([JSON.stringify(data)], { type: 'application/json' })
                )
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = localVarFormParams

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAzureLogin(
            code: string,
            error: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAzureLogin(
                code,
                error,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAzurePasswordReset(
            code: string,
            error: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.authControllerAzurePasswordReset(
                    code,
                    error,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAzureRegister(
            code: string,
            error: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAzureRegister(
                code,
                error,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetProfile(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetProfile(
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {any} avatar .jpeg file
         * @param {UpdateProfileDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerUpdateProfile(
            avatar: any,
            data: UpdateProfileDtoData,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerUpdateProfile(
                avatar,
                data,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAzureLogin(code: string, error: string, options?: any): AxiosPromise<void> {
            return localVarFp
                .authControllerAzureLogin(code, error, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAzurePasswordReset(
            code: string,
            error: string,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .authControllerAzurePasswordReset(code, error, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} code
         * @param {string} error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAzureRegister(
            code: string,
            error: string,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .authControllerAzureRegister(code, error, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile(options?: any): AxiosPromise<object> {
            return localVarFp
                .authControllerGetProfile(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {any} avatar .jpeg file
         * @param {UpdateProfileDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerUpdateProfile(
            avatar: any,
            data: UpdateProfileDtoData,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .authControllerUpdateProfile(avatar, data, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for authControllerAzureLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerAzureLoginRequest
 */
export interface AuthApiAuthControllerAzureLoginRequest {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerAzureLogin
     */
    readonly code: string

    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerAzureLogin
     */
    readonly error: string
}

/**
 * Request parameters for authControllerAzurePasswordReset operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerAzurePasswordResetRequest
 */
export interface AuthApiAuthControllerAzurePasswordResetRequest {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerAzurePasswordReset
     */
    readonly code: string

    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerAzurePasswordReset
     */
    readonly error: string
}

/**
 * Request parameters for authControllerAzureRegister operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerAzureRegisterRequest
 */
export interface AuthApiAuthControllerAzureRegisterRequest {
    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerAzureRegister
     */
    readonly code: string

    /**
     *
     * @type {string}
     * @memberof AuthApiAuthControllerAzureRegister
     */
    readonly error: string
}

/**
 * Request parameters for authControllerUpdateProfile operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerUpdateProfileRequest
 */
export interface AuthApiAuthControllerUpdateProfileRequest {
    /**
     * .jpeg file
     * @type {any}
     * @memberof AuthApiAuthControllerUpdateProfile
     */
    readonly avatar: any

    /**
     *
     * @type {UpdateProfileDtoData}
     * @memberof AuthApiAuthControllerUpdateProfile
     */
    readonly data: UpdateProfileDtoData
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @param {AuthApiAuthControllerAzureLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAzureLogin(
        requestParameters: AuthApiAuthControllerAzureLoginRequest,
        options?: AxiosRequestConfig
    ) {
        return AuthApiFp(this.configuration)
            .authControllerAzureLogin(requestParameters.code, requestParameters.error, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AuthApiAuthControllerAzurePasswordResetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAzurePasswordReset(
        requestParameters: AuthApiAuthControllerAzurePasswordResetRequest,
        options?: AxiosRequestConfig
    ) {
        return AuthApiFp(this.configuration)
            .authControllerAzurePasswordReset(
                requestParameters.code,
                requestParameters.error,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AuthApiAuthControllerAzureRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAzureRegister(
        requestParameters: AuthApiAuthControllerAzureRegisterRequest,
        options?: AxiosRequestConfig
    ) {
        return AuthApiFp(this.configuration)
            .authControllerAzureRegister(requestParameters.code, requestParameters.error, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerGetProfile(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration)
            .authControllerGetProfile(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AuthApiAuthControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerUpdateProfile(
        requestParameters: AuthApiAuthControllerUpdateProfileRequest,
        options?: AxiosRequestConfig
    ) {
        return AuthApiFp(this.configuration)
            .authControllerUpdateProfile(requestParameters.avatar, requestParameters.data, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * AzureApi - axios parameter creator
 * @export
 */
export const AzureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        azureControllerCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/azure/users`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        azureControllerFind: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/azure/users`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        azureControllerFindOne: async (
            email: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('azureControllerFindOne', 'email', email)
            const localVarPath = `/azure/users/email`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (email !== undefined) {
                localVarQueryParameter['email'] = email
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        azureControllerFindOneByEmail: async (
            id: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('azureControllerFindOneByEmail', 'id', id)
            const localVarPath = `/azure/users/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * AzureApi - functional programming interface
 * @export
 */
export const AzureApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = AzureApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async azureControllerCreate(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.azureControllerCreate(options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async azureControllerFind(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.azureControllerFind(options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async azureControllerFindOne(
            email: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.azureControllerFindOne(
                email,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async azureControllerFindOneByEmail(
            id: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.azureControllerFindOneByEmail(
                id,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * AzureApi - factory interface
 * @export
 */
export const AzureApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = AzureApiFp(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        azureControllerCreate(options?: any): AxiosPromise<object> {
            return localVarFp
                .azureControllerCreate(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        azureControllerFind(options?: any): AxiosPromise<Array<object>> {
            return localVarFp
                .azureControllerFind(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        azureControllerFindOne(email: string, options?: any): AxiosPromise<boolean> {
            return localVarFp
                .azureControllerFindOne(email, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        azureControllerFindOneByEmail(id: string, options?: any): AxiosPromise<object> {
            return localVarFp
                .azureControllerFindOneByEmail(id, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for azureControllerFindOne operation in AzureApi.
 * @export
 * @interface AzureApiAzureControllerFindOneRequest
 */
export interface AzureApiAzureControllerFindOneRequest {
    /**
     *
     * @type {string}
     * @memberof AzureApiAzureControllerFindOne
     */
    readonly email: string
}

/**
 * Request parameters for azureControllerFindOneByEmail operation in AzureApi.
 * @export
 * @interface AzureApiAzureControllerFindOneByEmailRequest
 */
export interface AzureApiAzureControllerFindOneByEmailRequest {
    /**
     *
     * @type {string}
     * @memberof AzureApiAzureControllerFindOneByEmail
     */
    readonly id: string
}

/**
 * AzureApi - object-oriented interface
 * @export
 * @class AzureApi
 * @extends {BaseAPI}
 */
export class AzureApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AzureApi
     */
    public azureControllerCreate(options?: AxiosRequestConfig) {
        return AzureApiFp(this.configuration)
            .azureControllerCreate(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AzureApi
     */
    public azureControllerFind(options?: AxiosRequestConfig) {
        return AzureApiFp(this.configuration)
            .azureControllerFind(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AzureApiAzureControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AzureApi
     */
    public azureControllerFindOne(
        requestParameters: AzureApiAzureControllerFindOneRequest,
        options?: AxiosRequestConfig
    ) {
        return AzureApiFp(this.configuration)
            .azureControllerFindOne(requestParameters.email, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {AzureApiAzureControllerFindOneByEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AzureApi
     */
    public azureControllerFindOneByEmail(
        requestParameters: AzureApiAzureControllerFindOneByEmailRequest,
        options?: AxiosRequestConfig
    ) {
        return AzureApiFp(this.configuration)
            .azureControllerFindOneByEmail(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * BoardsApi - axios parameter creator
 * @export
 */
export const BoardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new task board
         * @summary
         * @param {CreateBoardDto} createBoardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskBoard: async (
            createBoardDto: CreateBoardDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createBoardDto' is not null or undefined
            assertParamExists('createTaskBoard', 'createBoardDto', createBoardDto)
            const localVarPath = `/boards`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createBoardDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * delete board by id
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBoard: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBoard', 'id', id)
            const localVarPath = `/boards/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Dev only
         * @summary
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findManyBoard: async (
            projectId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('findManyBoard', 'projectId', projectId)
            const localVarPath = `/boards`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneBoard: async (
            id: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOneBoard', 'id', id)
            const localVarPath = `/boards/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         * Update board fields by id
         * @summary
         * @param {number} id
         * @param {UpdateBoardDto} updateBoardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoard: async (
            id: number,
            updateBoardDto: UpdateBoardDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBoard', 'id', id)
            // verify required parameter 'updateBoardDto' is not null or undefined
            assertParamExists('updateBoard', 'updateBoardDto', updateBoardDto)
            const localVarPath = `/boards/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateBoardDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * BoardsApi - functional programming interface
 * @export
 */
export const BoardsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = BoardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new task board
         * @summary
         * @param {CreateBoardDto} createBoardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskBoard(
            createBoardDto: CreateBoardDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskBoard(
                createBoardDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         * delete board by id
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBoard(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBoard(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         * Dev only
         * @summary
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findManyBoard(
            projectId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Board>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findManyBoard(
                projectId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneBoard(
            id: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneBoard(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         * Update board fields by id
         * @summary
         * @param {number} id
         * @param {UpdateBoardDto} updateBoardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBoard(
            id: number,
            updateBoardDto: UpdateBoardDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBoard(
                id,
                updateBoardDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * BoardsApi - factory interface
 * @export
 */
export const BoardsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = BoardsApiFp(configuration)
    return {
        /**
         * Create new task board
         * @summary
         * @param {CreateBoardDto} createBoardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskBoard(createBoardDto: CreateBoardDto, options?: any): AxiosPromise<Board> {
            return localVarFp
                .createTaskBoard(createBoardDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         * delete board by id
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBoard(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBoard(id, options).then((request) => request(axios, basePath))
        },
        /**
         * Dev only
         * @summary
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findManyBoard(projectId: number, options?: any): AxiosPromise<Array<Board>> {
            return localVarFp
                .findManyBoard(projectId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneBoard(id: string, options?: any): AxiosPromise<Board> {
            return localVarFp.findOneBoard(id, options).then((request) => request(axios, basePath))
        },
        /**
         * Update board fields by id
         * @summary
         * @param {number} id
         * @param {UpdateBoardDto} updateBoardDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBoard(
            id: number,
            updateBoardDto: UpdateBoardDto,
            options?: any
        ): AxiosPromise<Board> {
            return localVarFp
                .updateBoard(id, updateBoardDto, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for createTaskBoard operation in BoardsApi.
 * @export
 * @interface BoardsApiCreateTaskBoardRequest
 */
export interface BoardsApiCreateTaskBoardRequest {
    /**
     *
     * @type {CreateBoardDto}
     * @memberof BoardsApiCreateTaskBoard
     */
    readonly createBoardDto: CreateBoardDto
}

/**
 * Request parameters for deleteBoard operation in BoardsApi.
 * @export
 * @interface BoardsApiDeleteBoardRequest
 */
export interface BoardsApiDeleteBoardRequest {
    /**
     *
     * @type {number}
     * @memberof BoardsApiDeleteBoard
     */
    readonly id: number
}

/**
 * Request parameters for findManyBoard operation in BoardsApi.
 * @export
 * @interface BoardsApiFindManyBoardRequest
 */
export interface BoardsApiFindManyBoardRequest {
    /**
     *
     * @type {number}
     * @memberof BoardsApiFindManyBoard
     */
    readonly projectId: number
}

/**
 * Request parameters for findOneBoard operation in BoardsApi.
 * @export
 * @interface BoardsApiFindOneBoardRequest
 */
export interface BoardsApiFindOneBoardRequest {
    /**
     *
     * @type {string}
     * @memberof BoardsApiFindOneBoard
     */
    readonly id: string
}

/**
 * Request parameters for updateBoard operation in BoardsApi.
 * @export
 * @interface BoardsApiUpdateBoardRequest
 */
export interface BoardsApiUpdateBoardRequest {
    /**
     *
     * @type {number}
     * @memberof BoardsApiUpdateBoard
     */
    readonly id: number

    /**
     *
     * @type {UpdateBoardDto}
     * @memberof BoardsApiUpdateBoard
     */
    readonly updateBoardDto: UpdateBoardDto
}

/**
 * BoardsApi - object-oriented interface
 * @export
 * @class BoardsApi
 * @extends {BaseAPI}
 */
export class BoardsApi extends BaseAPI {
    /**
     * Create new task board
     * @summary
     * @param {BoardsApiCreateTaskBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public createTaskBoard(
        requestParameters: BoardsApiCreateTaskBoardRequest,
        options?: AxiosRequestConfig
    ) {
        return BoardsApiFp(this.configuration)
            .createTaskBoard(requestParameters.createBoardDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * delete board by id
     * @summary
     * @param {BoardsApiDeleteBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public deleteBoard(
        requestParameters: BoardsApiDeleteBoardRequest,
        options?: AxiosRequestConfig
    ) {
        return BoardsApiFp(this.configuration)
            .deleteBoard(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Dev only
     * @summary
     * @param {BoardsApiFindManyBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public findManyBoard(
        requestParameters: BoardsApiFindManyBoardRequest,
        options?: AxiosRequestConfig
    ) {
        return BoardsApiFp(this.configuration)
            .findManyBoard(requestParameters.projectId, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {BoardsApiFindOneBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public findOneBoard(
        requestParameters: BoardsApiFindOneBoardRequest,
        options?: AxiosRequestConfig
    ) {
        return BoardsApiFp(this.configuration)
            .findOneBoard(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     * Update board fields by id
     * @summary
     * @param {BoardsApiUpdateBoardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BoardsApi
     */
    public updateBoard(
        requestParameters: BoardsApiUpdateBoardRequest,
        options?: AxiosRequestConfig
    ) {
        return BoardsApiFp(this.configuration)
            .updateBoard(requestParameters.id, requestParameters.updateBoardDto, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {number} posterId
         * @param {CreateCommentData} createCommentData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerCreate: async (
            posterId: number,
            createCommentData: CreateCommentData,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'posterId' is not null or undefined
            assertParamExists('commentsControllerCreate', 'posterId', posterId)
            // verify required parameter 'createCommentData' is not null or undefined
            assertParamExists('commentsControllerCreate', 'createCommentData', createCommentData)
            const localVarPath = `/posters/{posterId}/comments`.replace(
                `{${'posterId'}}`,
                encodeURIComponent(String(posterId))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createCommentData,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} commentId
         * @param {number} posterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerDelete: async (
            commentId: number,
            posterId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('commentsControllerDelete', 'commentId', commentId)
            // verify required parameter 'posterId' is not null or undefined
            assertParamExists('commentsControllerDelete', 'posterId', posterId)
            const localVarPath = `/posters/{posterId}/comments/{commentId}`
                .replace(`{${'commentId'}}`, encodeURIComponent(String(commentId)))
                .replace(`{${'posterId'}}`, encodeURIComponent(String(posterId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} posterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerFind: async (
            posterId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'posterId' is not null or undefined
            assertParamExists('commentsControllerFind', 'posterId', posterId)
            const localVarPath = `/posters/{posterId}/comments`.replace(
                `{${'posterId'}}`,
                encodeURIComponent(String(posterId))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} posterId
         * @param {CreateCommentData} createCommentData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsControllerCreate(
            posterId: number,
            createCommentData: CreateCommentData,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsControllerCreate(
                posterId,
                createCommentData,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} commentId
         * @param {number} posterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsControllerDelete(
            commentId: number,
            posterId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsControllerDelete(
                commentId,
                posterId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} posterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsControllerFind(
            posterId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsControllerFind(
                posterId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         *
         * @param {number} posterId
         * @param {CreateCommentData} createCommentData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerCreate(
            posterId: number,
            createCommentData: CreateCommentData,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .commentsControllerCreate(posterId, createCommentData, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} commentId
         * @param {number} posterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerDelete(
            commentId: number,
            posterId: number,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .commentsControllerDelete(commentId, posterId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} posterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsControllerFind(posterId: number, options?: any): AxiosPromise<void> {
            return localVarFp
                .commentsControllerFind(posterId, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for commentsControllerCreate operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsControllerCreateRequest
 */
export interface CommentsApiCommentsControllerCreateRequest {
    /**
     *
     * @type {number}
     * @memberof CommentsApiCommentsControllerCreate
     */
    readonly posterId: number

    /**
     *
     * @type {CreateCommentData}
     * @memberof CommentsApiCommentsControllerCreate
     */
    readonly createCommentData: CreateCommentData
}

/**
 * Request parameters for commentsControllerDelete operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsControllerDeleteRequest
 */
export interface CommentsApiCommentsControllerDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof CommentsApiCommentsControllerDelete
     */
    readonly commentId: number

    /**
     *
     * @type {number}
     * @memberof CommentsApiCommentsControllerDelete
     */
    readonly posterId: number
}

/**
 * Request parameters for commentsControllerFind operation in CommentsApi.
 * @export
 * @interface CommentsApiCommentsControllerFindRequest
 */
export interface CommentsApiCommentsControllerFindRequest {
    /**
     *
     * @type {number}
     * @memberof CommentsApiCommentsControllerFind
     */
    readonly posterId: number
}

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
    /**
     *
     * @param {CommentsApiCommentsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsControllerCreate(
        requestParameters: CommentsApiCommentsControllerCreateRequest,
        options?: AxiosRequestConfig
    ) {
        return CommentsApiFp(this.configuration)
            .commentsControllerCreate(
                requestParameters.posterId,
                requestParameters.createCommentData,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {CommentsApiCommentsControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsControllerDelete(
        requestParameters: CommentsApiCommentsControllerDeleteRequest,
        options?: AxiosRequestConfig
    ) {
        return CommentsApiFp(this.configuration)
            .commentsControllerDelete(
                requestParameters.commentId,
                requestParameters.posterId,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {CommentsApiCommentsControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public commentsControllerFind(
        requestParameters: CommentsApiCommentsControllerFindRequest,
        options?: AxiosRequestConfig
    ) {
        return CommentsApiFp(this.configuration)
            .commentsControllerFind(requestParameters.posterId, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerCreate: async (
            body: object,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('testsControllerCreate', 'body', body)
            const localVarPath = `/tests`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                body,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tests`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerFindOne: async (
            id: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testsControllerFindOne', 'id', id)
            const localVarPath = `/tests/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerRemove: async (
            id: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testsControllerRemove', 'id', id)
            const localVarPath = `/tests/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerUpdate: async (
            id: string,
            body: object,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('testsControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('testsControllerUpdate', 'body', body)
            const localVarPath = `/tests/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                body,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testsControllerCreate(
            body: object,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testsControllerCreate(
                body,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testsControllerFindAll(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testsControllerFindAll(
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testsControllerFindOne(
            id: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testsControllerFindOne(
                id,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testsControllerRemove(
            id: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testsControllerRemove(
                id,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testsControllerUpdate(
            id: string,
            body: object,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testsControllerUpdate(
                id,
                body,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerCreate(body: object, options?: any): AxiosPromise<string> {
            return localVarFp
                .testsControllerCreate(body, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerFindAll(options?: any): AxiosPromise<string> {
            return localVarFp
                .testsControllerFindAll(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerFindOne(id: string, options?: any): AxiosPromise<string> {
            return localVarFp
                .testsControllerFindOne(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerRemove(id: string, options?: any): AxiosPromise<string> {
            return localVarFp
                .testsControllerRemove(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testsControllerUpdate(id: string, body: object, options?: any): AxiosPromise<string> {
            return localVarFp
                .testsControllerUpdate(id, body, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for testsControllerCreate operation in DefaultApi.
 * @export
 * @interface DefaultApiTestsControllerCreateRequest
 */
export interface DefaultApiTestsControllerCreateRequest {
    /**
     *
     * @type {object}
     * @memberof DefaultApiTestsControllerCreate
     */
    readonly body: object
}

/**
 * Request parameters for testsControllerFindOne operation in DefaultApi.
 * @export
 * @interface DefaultApiTestsControllerFindOneRequest
 */
export interface DefaultApiTestsControllerFindOneRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiTestsControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for testsControllerRemove operation in DefaultApi.
 * @export
 * @interface DefaultApiTestsControllerRemoveRequest
 */
export interface DefaultApiTestsControllerRemoveRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiTestsControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for testsControllerUpdate operation in DefaultApi.
 * @export
 * @interface DefaultApiTestsControllerUpdateRequest
 */
export interface DefaultApiTestsControllerUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof DefaultApiTestsControllerUpdate
     */
    readonly id: string

    /**
     *
     * @type {object}
     * @memberof DefaultApiTestsControllerUpdate
     */
    readonly body: object
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @param {DefaultApiTestsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testsControllerCreate(
        requestParameters: DefaultApiTestsControllerCreateRequest,
        options?: AxiosRequestConfig
    ) {
        return DefaultApiFp(this.configuration)
            .testsControllerCreate(requestParameters.body, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testsControllerFindAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .testsControllerFindAll(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {DefaultApiTestsControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testsControllerFindOne(
        requestParameters: DefaultApiTestsControllerFindOneRequest,
        options?: AxiosRequestConfig
    ) {
        return DefaultApiFp(this.configuration)
            .testsControllerFindOne(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {DefaultApiTestsControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testsControllerRemove(
        requestParameters: DefaultApiTestsControllerRemoveRequest,
        options?: AxiosRequestConfig
    ) {
        return DefaultApiFp(this.configuration)
            .testsControllerRemove(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {DefaultApiTestsControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testsControllerUpdate(
        requestParameters: DefaultApiTestsControllerUpdateRequest,
        options?: AxiosRequestConfig
    ) {
        return DefaultApiFp(this.configuration)
            .testsControllerUpdate(requestParameters.id, requestParameters.body, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * IAMUsersDeprecatedApi - axios parameter creator
 * @export
 */
export const IAMUsersDeprecatedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetAllUsersFromTenant: async (
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/iam/users`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetOneUserFromTenant: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerGetOneUserFromTenant', 'id', id)
            const localVarPath = `/iam/users/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * IAMUsersDeprecatedApi - functional programming interface
 * @export
 */
export const IAMUsersDeprecatedApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = IAMUsersDeprecatedApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetAllUsersFromTenant(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.usersControllerGetAllUsersFromTenant(options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetOneUserFromTenant(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.usersControllerGetOneUserFromTenant(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * IAMUsersDeprecatedApi - factory interface
 * @export
 */
export const IAMUsersDeprecatedApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = IAMUsersDeprecatedApiFp(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetAllUsersFromTenant(options?: any): AxiosPromise<Array<object>> {
            return localVarFp
                .usersControllerGetAllUsersFromTenant(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetOneUserFromTenant(id: number, options?: any): AxiosPromise<object> {
            return localVarFp
                .usersControllerGetOneUserFromTenant(id, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for usersControllerGetOneUserFromTenant operation in IAMUsersDeprecatedApi.
 * @export
 * @interface IAMUsersDeprecatedApiUsersControllerGetOneUserFromTenantRequest
 */
export interface IAMUsersDeprecatedApiUsersControllerGetOneUserFromTenantRequest {
    /**
     *
     * @type {number}
     * @memberof IAMUsersDeprecatedApiUsersControllerGetOneUserFromTenant
     */
    readonly id: number
}

/**
 * IAMUsersDeprecatedApi - object-oriented interface
 * @export
 * @class IAMUsersDeprecatedApi
 * @extends {BaseAPI}
 */
export class IAMUsersDeprecatedApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IAMUsersDeprecatedApi
     */
    public usersControllerGetAllUsersFromTenant(options?: AxiosRequestConfig) {
        return IAMUsersDeprecatedApiFp(this.configuration)
            .usersControllerGetAllUsersFromTenant(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {IAMUsersDeprecatedApiUsersControllerGetOneUserFromTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IAMUsersDeprecatedApi
     */
    public usersControllerGetOneUserFromTenant(
        requestParameters: IAMUsersDeprecatedApiUsersControllerGetOneUserFromTenantRequest,
        options?: AxiosRequestConfig
    ) {
        return IAMUsersDeprecatedApiFp(this.configuration)
            .usersControllerGetOneUserFromTenant(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * IdentityProvidersApi - axios parameter creator
 * @export
 */
export const IdentityProvidersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {number} [id]
         * @param {string} [name]
         * @param {string} [domain]
         * @param {number} [userDirectoryId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityProviderControllerFindAllIdp: async (
            id?: number,
            name?: string,
            domain?: string,
            userDirectoryId?: number,
            email?: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/identity-provider`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (id !== undefined) {
                localVarQueryParameter['id'] = id
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name
            }

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain
            }

            if (userDirectoryId !== undefined) {
                localVarQueryParameter['userDirectoryId'] = userDirectoryId
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} [id]
         * @param {string} [name]
         * @param {string} [domain]
         * @param {number} [userDirectoryId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityProviderControllerFindIdpByDomain: async (
            id?: number,
            name?: string,
            domain?: string,
            userDirectoryId?: number,
            email?: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/identity-provider/email`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (id !== undefined) {
                localVarQueryParameter['id'] = id
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name
            }

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain
            }

            if (userDirectoryId !== undefined) {
                localVarQueryParameter['userDirectoryId'] = userDirectoryId
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * IdentityProvidersApi - functional programming interface
 * @export
 */
export const IdentityProvidersApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentityProvidersApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} [id]
         * @param {string} [name]
         * @param {string} [domain]
         * @param {number} [userDirectoryId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityProviderControllerFindAllIdp(
            id?: number,
            name?: string,
            domain?: string,
            userDirectoryId?: number,
            email?: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.identityProviderControllerFindAllIdp(
                    id,
                    name,
                    domain,
                    userDirectoryId,
                    email,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} [id]
         * @param {string} [name]
         * @param {string} [domain]
         * @param {number} [userDirectoryId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identityProviderControllerFindIdpByDomain(
            id?: number,
            name?: string,
            domain?: string,
            userDirectoryId?: number,
            email?: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.identityProviderControllerFindIdpByDomain(
                    id,
                    name,
                    domain,
                    userDirectoryId,
                    email,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * IdentityProvidersApi - factory interface
 * @export
 */
export const IdentityProvidersApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = IdentityProvidersApiFp(configuration)
    return {
        /**
         *
         * @param {number} [id]
         * @param {string} [name]
         * @param {string} [domain]
         * @param {number} [userDirectoryId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityProviderControllerFindAllIdp(
            id?: number,
            name?: string,
            domain?: string,
            userDirectoryId?: number,
            email?: string,
            options?: any
        ): AxiosPromise<Array<object>> {
            return localVarFp
                .identityProviderControllerFindAllIdp(
                    id,
                    name,
                    domain,
                    userDirectoryId,
                    email,
                    options
                )
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} [id]
         * @param {string} [name]
         * @param {string} [domain]
         * @param {number} [userDirectoryId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityProviderControllerFindIdpByDomain(
            id?: number,
            name?: string,
            domain?: string,
            userDirectoryId?: number,
            email?: string,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .identityProviderControllerFindIdpByDomain(
                    id,
                    name,
                    domain,
                    userDirectoryId,
                    email,
                    options
                )
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for identityProviderControllerFindAllIdp operation in IdentityProvidersApi.
 * @export
 * @interface IdentityProvidersApiIdentityProviderControllerFindAllIdpRequest
 */
export interface IdentityProvidersApiIdentityProviderControllerFindAllIdpRequest {
    /**
     *
     * @type {number}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindAllIdp
     */
    readonly id?: number

    /**
     *
     * @type {string}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindAllIdp
     */
    readonly name?: string

    /**
     *
     * @type {string}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindAllIdp
     */
    readonly domain?: string

    /**
     *
     * @type {number}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindAllIdp
     */
    readonly userDirectoryId?: number

    /**
     *
     * @type {string}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindAllIdp
     */
    readonly email?: string
}

/**
 * Request parameters for identityProviderControllerFindIdpByDomain operation in IdentityProvidersApi.
 * @export
 * @interface IdentityProvidersApiIdentityProviderControllerFindIdpByDomainRequest
 */
export interface IdentityProvidersApiIdentityProviderControllerFindIdpByDomainRequest {
    /**
     *
     * @type {number}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindIdpByDomain
     */
    readonly id?: number

    /**
     *
     * @type {string}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindIdpByDomain
     */
    readonly name?: string

    /**
     *
     * @type {string}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindIdpByDomain
     */
    readonly domain?: string

    /**
     *
     * @type {number}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindIdpByDomain
     */
    readonly userDirectoryId?: number

    /**
     *
     * @type {string}
     * @memberof IdentityProvidersApiIdentityProviderControllerFindIdpByDomain
     */
    readonly email?: string
}

/**
 * IdentityProvidersApi - object-oriented interface
 * @export
 * @class IdentityProvidersApi
 * @extends {BaseAPI}
 */
export class IdentityProvidersApi extends BaseAPI {
    /**
     *
     * @param {IdentityProvidersApiIdentityProviderControllerFindAllIdpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProvidersApi
     */
    public identityProviderControllerFindAllIdp(
        requestParameters: IdentityProvidersApiIdentityProviderControllerFindAllIdpRequest = {},
        options?: AxiosRequestConfig
    ) {
        return IdentityProvidersApiFp(this.configuration)
            .identityProviderControllerFindAllIdp(
                requestParameters.id,
                requestParameters.name,
                requestParameters.domain,
                requestParameters.userDirectoryId,
                requestParameters.email,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {IdentityProvidersApiIdentityProviderControllerFindIdpByDomainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProvidersApi
     */
    public identityProviderControllerFindIdpByDomain(
        requestParameters: IdentityProvidersApiIdentityProviderControllerFindIdpByDomainRequest = {},
        options?: AxiosRequestConfig
    ) {
        return IdentityProvidersApiFp(this.configuration)
            .identityProviderControllerFindIdpByDomain(
                requestParameters.id,
                requestParameters.name,
                requestParameters.domain,
                requestParameters.userDirectoryId,
                requestParameters.email,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * InvitesApi - axios parameter creator
 * @export
 */
export const InvitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} token
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteControllerAcceptUserInvitation: async (
            token: string,
            email: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('inviteControllerAcceptUserInvitation', 'token', token)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('inviteControllerAcceptUserInvitation', 'email', email)
            const localVarPath = `/iam/invite/accept-invite`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (token !== undefined) {
                localVarQueryParameter['token'] = token
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteControllerFetchPublicInvite: async (
            workspaceId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('inviteControllerFetchPublicInvite', 'workspaceId', workspaceId)
            const localVarPath = `/iam/invite/public-invite`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {CreateInviteDto} createInviteDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteControllerInviteUser: async (
            createInviteDto: CreateInviteDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createInviteDto' is not null or undefined
            assertParamExists('inviteControllerInviteUser', 'createInviteDto', createInviteDto)
            const localVarPath = `/iam/invite`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createInviteDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} id
         * @param {UpdatePublicInviteStatus} updatePublicInviteStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteControllerUpdateInvitationStatus: async (
            id: string,
            updatePublicInviteStatus: UpdatePublicInviteStatus,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inviteControllerUpdateInvitationStatus', 'id', id)
            // verify required parameter 'updatePublicInviteStatus' is not null or undefined
            assertParamExists(
                'inviteControllerUpdateInvitationStatus',
                'updatePublicInviteStatus',
                updatePublicInviteStatus
            )
            const localVarPath = `/iam/invite/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updatePublicInviteStatus,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * InvitesApi - functional programming interface
 * @export
 */
export const InvitesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = InvitesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} token
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteControllerAcceptUserInvitation(
            token: string,
            email: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.inviteControllerAcceptUserInvitation(
                    token,
                    email,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteControllerFetchPublicInvite(
            workspaceId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.inviteControllerFetchPublicInvite(
                    workspaceId,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {CreateInviteDto} createInviteDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteControllerInviteUser(
            createInviteDto: CreateInviteDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteControllerInviteUser(
                createInviteDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} id
         * @param {UpdatePublicInviteStatus} updatePublicInviteStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteControllerUpdateInvitationStatus(
            id: string,
            updatePublicInviteStatus: UpdatePublicInviteStatus,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.inviteControllerUpdateInvitationStatus(
                    id,
                    updatePublicInviteStatus,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * InvitesApi - factory interface
 * @export
 */
export const InvitesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = InvitesApiFp(configuration)
    return {
        /**
         *
         * @param {string} token
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteControllerAcceptUserInvitation(
            token: string,
            email: string,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .inviteControllerAcceptUserInvitation(token, email, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteControllerFetchPublicInvite(
            workspaceId: number,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .inviteControllerFetchPublicInvite(workspaceId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {CreateInviteDto} createInviteDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteControllerInviteUser(
            createInviteDto: CreateInviteDto,
            options?: any
        ): AxiosPromise<string> {
            return localVarFp
                .inviteControllerInviteUser(createInviteDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} id
         * @param {UpdatePublicInviteStatus} updatePublicInviteStatus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteControllerUpdateInvitationStatus(
            id: string,
            updatePublicInviteStatus: UpdatePublicInviteStatus,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .inviteControllerUpdateInvitationStatus(id, updatePublicInviteStatus, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for inviteControllerAcceptUserInvitation operation in InvitesApi.
 * @export
 * @interface InvitesApiInviteControllerAcceptUserInvitationRequest
 */
export interface InvitesApiInviteControllerAcceptUserInvitationRequest {
    /**
     *
     * @type {string}
     * @memberof InvitesApiInviteControllerAcceptUserInvitation
     */
    readonly token: string

    /**
     *
     * @type {string}
     * @memberof InvitesApiInviteControllerAcceptUserInvitation
     */
    readonly email: string
}

/**
 * Request parameters for inviteControllerFetchPublicInvite operation in InvitesApi.
 * @export
 * @interface InvitesApiInviteControllerFetchPublicInviteRequest
 */
export interface InvitesApiInviteControllerFetchPublicInviteRequest {
    /**
     *
     * @type {number}
     * @memberof InvitesApiInviteControllerFetchPublicInvite
     */
    readonly workspaceId: number
}

/**
 * Request parameters for inviteControllerInviteUser operation in InvitesApi.
 * @export
 * @interface InvitesApiInviteControllerInviteUserRequest
 */
export interface InvitesApiInviteControllerInviteUserRequest {
    /**
     *
     * @type {CreateInviteDto}
     * @memberof InvitesApiInviteControllerInviteUser
     */
    readonly createInviteDto: CreateInviteDto
}

/**
 * Request parameters for inviteControllerUpdateInvitationStatus operation in InvitesApi.
 * @export
 * @interface InvitesApiInviteControllerUpdateInvitationStatusRequest
 */
export interface InvitesApiInviteControllerUpdateInvitationStatusRequest {
    /**
     *
     * @type {string}
     * @memberof InvitesApiInviteControllerUpdateInvitationStatus
     */
    readonly id: string

    /**
     *
     * @type {UpdatePublicInviteStatus}
     * @memberof InvitesApiInviteControllerUpdateInvitationStatus
     */
    readonly updatePublicInviteStatus: UpdatePublicInviteStatus
}

/**
 * InvitesApi - object-oriented interface
 * @export
 * @class InvitesApi
 * @extends {BaseAPI}
 */
export class InvitesApi extends BaseAPI {
    /**
     *
     * @param {InvitesApiInviteControllerAcceptUserInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitesApi
     */
    public inviteControllerAcceptUserInvitation(
        requestParameters: InvitesApiInviteControllerAcceptUserInvitationRequest,
        options?: AxiosRequestConfig
    ) {
        return InvitesApiFp(this.configuration)
            .inviteControllerAcceptUserInvitation(
                requestParameters.token,
                requestParameters.email,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {InvitesApiInviteControllerFetchPublicInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitesApi
     */
    public inviteControllerFetchPublicInvite(
        requestParameters: InvitesApiInviteControllerFetchPublicInviteRequest,
        options?: AxiosRequestConfig
    ) {
        return InvitesApiFp(this.configuration)
            .inviteControllerFetchPublicInvite(requestParameters.workspaceId, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {InvitesApiInviteControllerInviteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitesApi
     */
    public inviteControllerInviteUser(
        requestParameters: InvitesApiInviteControllerInviteUserRequest,
        options?: AxiosRequestConfig
    ) {
        return InvitesApiFp(this.configuration)
            .inviteControllerInviteUser(requestParameters.createInviteDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {InvitesApiInviteControllerUpdateInvitationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitesApi
     */
    public inviteControllerUpdateInvitationStatus(
        requestParameters: InvitesApiInviteControllerUpdateInvitationStatusRequest,
        options?: AxiosRequestConfig
    ) {
        return InvitesApiFp(this.configuration)
            .inviteControllerUpdateInvitationStatus(
                requestParameters.id,
                requestParameters.updatePublicInviteStatus,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * LiveSessionApi - axios parameter creator
 * @export
 */
export const LiveSessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary
         * @param {string} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveSessionClose: async (
            body: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('liveSessionClose', 'body', body)
            const localVarPath = `/live-session/close`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                body,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {GenerateJWTTokenDto} generateJWTTokenDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveSessionControllerGenerateJWTtoken: async (
            generateJWTTokenDto: GenerateJWTTokenDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'generateJWTTokenDto' is not null or undefined
            assertParamExists(
                'liveSessionControllerGenerateJWTtoken',
                'generateJWTTokenDto',
                generateJWTTokenDto
            )
            const localVarPath = `/live-session/generate-token`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                generateJWTTokenDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {CreateLiveSessionDto} createLiveSessionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveSessionCreate: async (
            createLiveSessionDto: CreateLiveSessionDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createLiveSessionDto' is not null or undefined
            assertParamExists('liveSessionCreate', 'createLiveSessionDto', createLiveSessionDto)
            const localVarPath = `/live-session`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createLiveSessionDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveSessionFetch: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/live-session`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * LiveSessionApi - functional programming interface
 * @export
 */
export const LiveSessionApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = LiveSessionApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary
         * @param {string} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liveSessionClose(
            body: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.liveSessionClose(
                body,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {GenerateJWTTokenDto} generateJWTTokenDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liveSessionControllerGenerateJWTtoken(
            generateJWTTokenDto: GenerateJWTTokenDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.liveSessionControllerGenerateJWTtoken(
                    generateJWTTokenDto,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {CreateLiveSessionDto} createLiveSessionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liveSessionCreate(
            createLiveSessionDto: CreateLiveSessionDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.liveSessionCreate(
                createLiveSessionDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liveSessionFetch(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.liveSessionFetch(options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * LiveSessionApi - factory interface
 * @export
 */
export const LiveSessionApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = LiveSessionApiFp(configuration)
    return {
        /**
         *
         * @summary
         * @param {string} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveSessionClose(body: string, options?: any): AxiosPromise<void> {
            return localVarFp
                .liveSessionClose(body, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {GenerateJWTTokenDto} generateJWTTokenDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveSessionControllerGenerateJWTtoken(
            generateJWTTokenDto: GenerateJWTTokenDto,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .liveSessionControllerGenerateJWTtoken(generateJWTTokenDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {CreateLiveSessionDto} createLiveSessionDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveSessionCreate(
            createLiveSessionDto: CreateLiveSessionDto,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .liveSessionCreate(createLiveSessionDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveSessionFetch(options?: any): AxiosPromise<void> {
            return localVarFp.liveSessionFetch(options).then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for liveSessionClose operation in LiveSessionApi.
 * @export
 * @interface LiveSessionApiLiveSessionCloseRequest
 */
export interface LiveSessionApiLiveSessionCloseRequest {
    /**
     *
     * @type {string}
     * @memberof LiveSessionApiLiveSessionClose
     */
    readonly body: string
}

/**
 * Request parameters for liveSessionControllerGenerateJWTtoken operation in LiveSessionApi.
 * @export
 * @interface LiveSessionApiLiveSessionControllerGenerateJWTtokenRequest
 */
export interface LiveSessionApiLiveSessionControllerGenerateJWTtokenRequest {
    /**
     *
     * @type {GenerateJWTTokenDto}
     * @memberof LiveSessionApiLiveSessionControllerGenerateJWTtoken
     */
    readonly generateJWTTokenDto: GenerateJWTTokenDto
}

/**
 * Request parameters for liveSessionCreate operation in LiveSessionApi.
 * @export
 * @interface LiveSessionApiLiveSessionCreateRequest
 */
export interface LiveSessionApiLiveSessionCreateRequest {
    /**
     *
     * @type {CreateLiveSessionDto}
     * @memberof LiveSessionApiLiveSessionCreate
     */
    readonly createLiveSessionDto: CreateLiveSessionDto
}

/**
 * LiveSessionApi - object-oriented interface
 * @export
 * @class LiveSessionApi
 * @extends {BaseAPI}
 */
export class LiveSessionApi extends BaseAPI {
    /**
     *
     * @summary
     * @param {LiveSessionApiLiveSessionCloseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveSessionApi
     */
    public liveSessionClose(
        requestParameters: LiveSessionApiLiveSessionCloseRequest,
        options?: AxiosRequestConfig
    ) {
        return LiveSessionApiFp(this.configuration)
            .liveSessionClose(requestParameters.body, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {LiveSessionApiLiveSessionControllerGenerateJWTtokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveSessionApi
     */
    public liveSessionControllerGenerateJWTtoken(
        requestParameters: LiveSessionApiLiveSessionControllerGenerateJWTtokenRequest,
        options?: AxiosRequestConfig
    ) {
        return LiveSessionApiFp(this.configuration)
            .liveSessionControllerGenerateJWTtoken(requestParameters.generateJWTTokenDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {LiveSessionApiLiveSessionCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveSessionApi
     */
    public liveSessionCreate(
        requestParameters: LiveSessionApiLiveSessionCreateRequest,
        options?: AxiosRequestConfig
    ) {
        return LiveSessionApiFp(this.configuration)
            .liveSessionCreate(requestParameters.createLiveSessionDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveSessionApi
     */
    public liveSessionFetch(options?: AxiosRequestConfig) {
        return LiveSessionApiFp(this.configuration)
            .liveSessionFetch(options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * MailApi - axios parameter creator
 * @export
 */
export const MailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {NewsletterDto} newsletterDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailControllerNewsletter: async (
            newsletterDto: NewsletterDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'newsletterDto' is not null or undefined
            assertParamExists('mailControllerNewsletter', 'newsletterDto', newsletterDto)
            const localVarPath = `/mail/newsletter`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                newsletterDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * MailApi - functional programming interface
 * @export
 */
export const MailApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = MailApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {NewsletterDto} newsletterDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailControllerNewsletter(
            newsletterDto: NewsletterDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailControllerNewsletter(
                newsletterDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * MailApi - factory interface
 * @export
 */
export const MailApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = MailApiFp(configuration)
    return {
        /**
         *
         * @param {NewsletterDto} newsletterDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailControllerNewsletter(newsletterDto: NewsletterDto, options?: any): AxiosPromise<void> {
            return localVarFp
                .mailControllerNewsletter(newsletterDto, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for mailControllerNewsletter operation in MailApi.
 * @export
 * @interface MailApiMailControllerNewsletterRequest
 */
export interface MailApiMailControllerNewsletterRequest {
    /**
     *
     * @type {NewsletterDto}
     * @memberof MailApiMailControllerNewsletter
     */
    readonly newsletterDto: NewsletterDto
}

/**
 * MailApi - object-oriented interface
 * @export
 * @class MailApi
 * @extends {BaseAPI}
 */
export class MailApi extends BaseAPI {
    /**
     *
     * @param {MailApiMailControllerNewsletterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailApi
     */
    public mailControllerNewsletter(
        requestParameters: MailApiMailControllerNewsletterRequest,
        options?: AxiosRequestConfig
    ) {
        return MailApiFp(this.configuration)
            .mailControllerNewsletter(requestParameters.newsletterDto, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * PostersApi - axios parameter creator
 * @export
 */
export const PostersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary
         * @param {number} workspaceId
         * @param {any} image .jpeg file
         * @param {any} pdf .pdf file
         * @param {CreatePosterDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterCreate: async (
            workspaceId: number,
            image: any,
            pdf: any,
            data: CreatePosterDtoData,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('posterCreate', 'workspaceId', workspaceId)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('posterCreate', 'image', image)
            // verify required parameter 'pdf' is not null or undefined
            assertParamExists('posterCreate', 'pdf', pdf)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('posterCreate', 'data', data)
            const localVarPath = `/workspaces/{workspaceId}/posters`.replace(
                `{${'workspaceId'}}`,
                encodeURIComponent(String(workspaceId))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any
            const localVarFormParams = new ((configuration && configuration.formDataCtor) ||
                FormData)()

            if (image !== undefined) {
                localVarFormParams.append('image', image as any)
            }

            if (pdf !== undefined) {
                localVarFormParams.append('pdf', pdf as any)
            }

            if (data !== undefined) {
                localVarFormParams.append(
                    'data',
                    new Blob([JSON.stringify(data)], { type: 'application/json' })
                )
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = localVarFormParams

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterDelete: async (
            id: number,
            workspaceId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('posterDelete', 'id', id)
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('posterDelete', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/{workspaceId}/posters/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} workspaceId
         * @param {string} search
         * @param {string} [title]
         * @param {Array<string>} [topics]
         * @param {Array<string>} [keywords]
         * @param {Array<string>} [authors]
         * @param {Array<string>} [organizations]
         * @param {boolean} [or]
         * @param {number} [take]
         * @param {number} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterFindMany: async (
            workspaceId: number,
            search: string,
            title?: string,
            topics?: Array<string>,
            keywords?: Array<string>,
            authors?: Array<string>,
            organizations?: Array<string>,
            or?: boolean,
            take?: number,
            skip?: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('posterFindMany', 'workspaceId', workspaceId)
            // verify required parameter 'search' is not null or undefined
            assertParamExists('posterFindMany', 'search', search)
            const localVarPath = `/workspaces/{workspaceId}/posters`.replace(
                `{${'workspaceId'}}`,
                encodeURIComponent(String(workspaceId))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (title !== undefined) {
                localVarQueryParameter['title'] = title
            }

            if (topics) {
                localVarQueryParameter['topics'] = topics
            }

            if (keywords) {
                localVarQueryParameter['keywords'] = keywords
            }

            if (authors) {
                localVarQueryParameter['authors'] = authors
            }

            if (organizations) {
                localVarQueryParameter['organizations'] = organizations
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search
            }

            if (or !== undefined) {
                localVarQueryParameter['or'] = or
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterFindOne: async (
            id: number,
            workspaceId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('posterFindOne', 'id', id)
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('posterFindOne', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/{workspaceId}/posters/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {any} image .jpeg file
         * @param {any} pdf .pdf file
         * @param {UpdatePosterDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterUpdate: async (
            id: number,
            workspaceId: number,
            image: any,
            pdf: any,
            data: UpdatePosterDtoData,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('posterUpdate', 'id', id)
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('posterUpdate', 'workspaceId', workspaceId)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('posterUpdate', 'image', image)
            // verify required parameter 'pdf' is not null or undefined
            assertParamExists('posterUpdate', 'pdf', pdf)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('posterUpdate', 'data', data)
            const localVarPath = `/workspaces/{workspaceId}/posters/{id}`
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any
            const localVarFormParams = new ((configuration && configuration.formDataCtor) ||
                FormData)()

            if (image !== undefined) {
                localVarFormParams.append('image', image as any)
            }

            if (pdf !== undefined) {
                localVarFormParams.append('pdf', pdf as any)
            }

            if (data !== undefined) {
                localVarFormParams.append(
                    'data',
                    new Blob([JSON.stringify(data)], { type: 'application/json' })
                )
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = localVarFormParams

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * PostersApi - functional programming interface
 * @export
 */
export const PostersApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = PostersApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary
         * @param {number} workspaceId
         * @param {any} image .jpeg file
         * @param {any} pdf .pdf file
         * @param {CreatePosterDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async posterCreate(
            workspaceId: number,
            image: any,
            pdf: any,
            data: CreatePosterDtoData,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.posterCreate(
                workspaceId,
                image,
                pdf,
                data,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async posterDelete(
            id: number,
            workspaceId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.posterDelete(
                id,
                workspaceId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} workspaceId
         * @param {string} search
         * @param {string} [title]
         * @param {Array<string>} [topics]
         * @param {Array<string>} [keywords]
         * @param {Array<string>} [authors]
         * @param {Array<string>} [organizations]
         * @param {boolean} [or]
         * @param {number} [take]
         * @param {number} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async posterFindMany(
            workspaceId: number,
            search: string,
            title?: string,
            topics?: Array<string>,
            keywords?: Array<string>,
            authors?: Array<string>,
            organizations?: Array<string>,
            or?: boolean,
            take?: number,
            skip?: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.posterFindMany(
                workspaceId,
                search,
                title,
                topics,
                keywords,
                authors,
                organizations,
                or,
                take,
                skip,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async posterFindOne(
            id: number,
            workspaceId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.posterFindOne(
                id,
                workspaceId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {any} image .jpeg file
         * @param {any} pdf .pdf file
         * @param {UpdatePosterDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async posterUpdate(
            id: number,
            workspaceId: number,
            image: any,
            pdf: any,
            data: UpdatePosterDtoData,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Poster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.posterUpdate(
                id,
                workspaceId,
                image,
                pdf,
                data,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * PostersApi - factory interface
 * @export
 */
export const PostersApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = PostersApiFp(configuration)
    return {
        /**
         *
         * @summary
         * @param {number} workspaceId
         * @param {any} image .jpeg file
         * @param {any} pdf .pdf file
         * @param {CreatePosterDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterCreate(
            workspaceId: number,
            image: any,
            pdf: any,
            data: CreatePosterDtoData,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .posterCreate(workspaceId, image, pdf, data, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterDelete(id: number, workspaceId: number, options?: any): AxiosPromise<void> {
            return localVarFp
                .posterDelete(id, workspaceId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} workspaceId
         * @param {string} search
         * @param {string} [title]
         * @param {Array<string>} [topics]
         * @param {Array<string>} [keywords]
         * @param {Array<string>} [authors]
         * @param {Array<string>} [organizations]
         * @param {boolean} [or]
         * @param {number} [take]
         * @param {number} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterFindMany(
            workspaceId: number,
            search: string,
            title?: string,
            topics?: Array<string>,
            keywords?: Array<string>,
            authors?: Array<string>,
            organizations?: Array<string>,
            or?: boolean,
            take?: number,
            skip?: number,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .posterFindMany(
                    workspaceId,
                    search,
                    title,
                    topics,
                    keywords,
                    authors,
                    organizations,
                    or,
                    take,
                    skip,
                    options
                )
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterFindOne(id: number, workspaceId: number, options?: any): AxiosPromise<void> {
            return localVarFp
                .posterFindOne(id, workspaceId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {number} workspaceId
         * @param {any} image .jpeg file
         * @param {any} pdf .pdf file
         * @param {UpdatePosterDtoData} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        posterUpdate(
            id: number,
            workspaceId: number,
            image: any,
            pdf: any,
            data: UpdatePosterDtoData,
            options?: any
        ): AxiosPromise<Poster> {
            return localVarFp
                .posterUpdate(id, workspaceId, image, pdf, data, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for posterCreate operation in PostersApi.
 * @export
 * @interface PostersApiPosterCreateRequest
 */
export interface PostersApiPosterCreateRequest {
    /**
     *
     * @type {number}
     * @memberof PostersApiPosterCreate
     */
    readonly workspaceId: number

    /**
     * .jpeg file
     * @type {any}
     * @memberof PostersApiPosterCreate
     */
    readonly image: any

    /**
     * .pdf file
     * @type {any}
     * @memberof PostersApiPosterCreate
     */
    readonly pdf: any

    /**
     *
     * @type {CreatePosterDtoData}
     * @memberof PostersApiPosterCreate
     */
    readonly data: CreatePosterDtoData
}

/**
 * Request parameters for posterDelete operation in PostersApi.
 * @export
 * @interface PostersApiPosterDeleteRequest
 */
export interface PostersApiPosterDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof PostersApiPosterDelete
     */
    readonly id: number

    /**
     *
     * @type {number}
     * @memberof PostersApiPosterDelete
     */
    readonly workspaceId: number
}

/**
 * Request parameters for posterFindMany operation in PostersApi.
 * @export
 * @interface PostersApiPosterFindManyRequest
 */
export interface PostersApiPosterFindManyRequest {
    /**
     *
     * @type {number}
     * @memberof PostersApiPosterFindMany
     */
    readonly workspaceId: number

    /**
     *
     * @type {string}
     * @memberof PostersApiPosterFindMany
     */
    readonly search: string

    /**
     *
     * @type {string}
     * @memberof PostersApiPosterFindMany
     */
    readonly title?: string

    /**
     *
     * @type {Array<string>}
     * @memberof PostersApiPosterFindMany
     */
    readonly topics?: Array<string>

    /**
     *
     * @type {Array<string>}
     * @memberof PostersApiPosterFindMany
     */
    readonly keywords?: Array<string>

    /**
     *
     * @type {Array<string>}
     * @memberof PostersApiPosterFindMany
     */
    readonly authors?: Array<string>

    /**
     *
     * @type {Array<string>}
     * @memberof PostersApiPosterFindMany
     */
    readonly organizations?: Array<string>

    /**
     *
     * @type {boolean}
     * @memberof PostersApiPosterFindMany
     */
    readonly or?: boolean

    /**
     *
     * @type {number}
     * @memberof PostersApiPosterFindMany
     */
    readonly take?: number

    /**
     *
     * @type {number}
     * @memberof PostersApiPosterFindMany
     */
    readonly skip?: number
}

/**
 * Request parameters for posterFindOne operation in PostersApi.
 * @export
 * @interface PostersApiPosterFindOneRequest
 */
export interface PostersApiPosterFindOneRequest {
    /**
     *
     * @type {number}
     * @memberof PostersApiPosterFindOne
     */
    readonly id: number

    /**
     *
     * @type {number}
     * @memberof PostersApiPosterFindOne
     */
    readonly workspaceId: number
}

/**
 * Request parameters for posterUpdate operation in PostersApi.
 * @export
 * @interface PostersApiPosterUpdateRequest
 */
export interface PostersApiPosterUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof PostersApiPosterUpdate
     */
    readonly id: number

    /**
     *
     * @type {number}
     * @memberof PostersApiPosterUpdate
     */
    readonly workspaceId: number

    /**
     * .jpeg file
     * @type {any}
     * @memberof PostersApiPosterUpdate
     */
    readonly image: any

    /**
     * .pdf file
     * @type {any}
     * @memberof PostersApiPosterUpdate
     */
    readonly pdf: any

    /**
     *
     * @type {UpdatePosterDtoData}
     * @memberof PostersApiPosterUpdate
     */
    readonly data: UpdatePosterDtoData
}

/**
 * PostersApi - object-oriented interface
 * @export
 * @class PostersApi
 * @extends {BaseAPI}
 */
export class PostersApi extends BaseAPI {
    /**
     *
     * @summary
     * @param {PostersApiPosterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public posterCreate(
        requestParameters: PostersApiPosterCreateRequest,
        options?: AxiosRequestConfig
    ) {
        return PostersApiFp(this.configuration)
            .posterCreate(
                requestParameters.workspaceId,
                requestParameters.image,
                requestParameters.pdf,
                requestParameters.data,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {PostersApiPosterDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public posterDelete(
        requestParameters: PostersApiPosterDeleteRequest,
        options?: AxiosRequestConfig
    ) {
        return PostersApiFp(this.configuration)
            .posterDelete(requestParameters.id, requestParameters.workspaceId, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {PostersApiPosterFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public posterFindMany(
        requestParameters: PostersApiPosterFindManyRequest,
        options?: AxiosRequestConfig
    ) {
        return PostersApiFp(this.configuration)
            .posterFindMany(
                requestParameters.workspaceId,
                requestParameters.search,
                requestParameters.title,
                requestParameters.topics,
                requestParameters.keywords,
                requestParameters.authors,
                requestParameters.organizations,
                requestParameters.or,
                requestParameters.take,
                requestParameters.skip,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {PostersApiPosterFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public posterFindOne(
        requestParameters: PostersApiPosterFindOneRequest,
        options?: AxiosRequestConfig
    ) {
        return PostersApiFp(this.configuration)
            .posterFindOne(requestParameters.id, requestParameters.workspaceId, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {PostersApiPosterUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostersApi
     */
    public posterUpdate(
        requestParameters: PostersApiPosterUpdateRequest,
        options?: AxiosRequestConfig
    ) {
        return PostersApiFp(this.configuration)
            .posterUpdate(
                requestParameters.id,
                requestParameters.workspaceId,
                requestParameters.image,
                requestParameters.pdf,
                requestParameters.data,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateProjectDto} createProjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerCreate: async (
            workspaceId: string,
            createProjectDto: CreateProjectDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('projectControllerCreate', 'workspaceId', workspaceId)
            // verify required parameter 'createProjectDto' is not null or undefined
            assertParamExists('projectControllerCreate', 'createProjectDto', createProjectDto)
            const localVarPath = `/workspaces/{workspaceId}/projects`.replace(
                `{${'workspaceId'}}`,
                encodeURIComponent(String(workspaceId))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createProjectDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDelete: async (
            workspaceId: number,
            projectId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('projectControllerDelete', 'workspaceId', workspaceId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectControllerDelete', 'projectId', projectId)
            const localVarPath = `/workspaces/{workspaceId}/projects/{projectId}`
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {number} uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDeleteUpload: async (
            workspaceId: number,
            id: number,
            uploadId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('projectControllerDeleteUpload', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerDeleteUpload', 'id', id)
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('projectControllerDeleteUpload', 'uploadId', uploadId)
            const localVarPath = `/workspaces/{workspaceId}/projects/{id}/uploads/{uploadId}`
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
                .replace(`{${'uploadId'}}`, encodeURIComponent(String(uploadId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} workspaceId
         * @param {string} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindMany: async (
            workspaceId: number,
            name?: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('projectControllerFindMany', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/{workspaceId}/projects`.replace(
                `{${'workspaceId'}}`,
                encodeURIComponent(String(workspaceId))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (name !== undefined) {
                localVarQueryParameter['name'] = name
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindOne: async (
            workspaceId: number,
            projectId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('projectControllerFindOne', 'workspaceId', workspaceId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectControllerFindOne', 'projectId', projectId)
            const localVarPath = `/workspaces/{workspaceId}/projects/{projectId}`
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {UpdateProjectDto} updateProjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUpdate: async (
            workspaceId: number,
            id: number,
            updateProjectDto: UpdateProjectDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('projectControllerUpdate', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerUpdate', 'id', id)
            // verify required parameter 'updateProjectDto' is not null or undefined
            assertParamExists('projectControllerUpdate', 'updateProjectDto', updateProjectDto)
            const localVarPath = `/workspaces/{workspaceId}/projects/{id}`
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateProjectDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUploadFile: async (
            workspaceId: number,
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('projectControllerUploadFile', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerUploadFile', 'id', id)
            const localVarPath = `/workspaces/{workspaceId}/projects/{id}/uploads`
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateProjectDto} createProjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerCreate(
            workspaceId: string,
            createProjectDto: CreateProjectDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerCreate(
                workspaceId,
                createProjectDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerDelete(
            workspaceId: number,
            projectId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerDelete(
                workspaceId,
                projectId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {number} uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerDeleteUpload(
            workspaceId: number,
            id: number,
            uploadId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerDeleteUpload(
                workspaceId,
                id,
                uploadId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} workspaceId
         * @param {string} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerFindMany(
            workspaceId: number,
            name?: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerFindMany(
                workspaceId,
                name,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerFindOne(
            workspaceId: number,
            projectId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerFindOne(
                workspaceId,
                projectId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {UpdateProjectDto} updateProjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerUpdate(
            workspaceId: number,
            id: number,
            updateProjectDto: UpdateProjectDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerUpdate(
                workspaceId,
                id,
                updateProjectDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerUploadFile(
            workspaceId: number,
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerUploadFile(
                workspaceId,
                id,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateProjectDto} createProjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerCreate(
            workspaceId: string,
            createProjectDto: CreateProjectDto,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .projectControllerCreate(workspaceId, createProjectDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDelete(
            workspaceId: number,
            projectId: number,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .projectControllerDelete(workspaceId, projectId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {number} uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerDeleteUpload(
            workspaceId: number,
            id: number,
            uploadId: number,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .projectControllerDeleteUpload(workspaceId, id, uploadId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} workspaceId
         * @param {string} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindMany(
            workspaceId: number,
            name?: string,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .projectControllerFindMany(workspaceId, name, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindOne(
            workspaceId: number,
            projectId: number,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .projectControllerFindOne(workspaceId, projectId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {UpdateProjectDto} updateProjectDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUpdate(
            workspaceId: number,
            id: number,
            updateProjectDto: UpdateProjectDto,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .projectControllerUpdate(workspaceId, id, updateProjectDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUploadFile(
            workspaceId: number,
            id: number,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .projectControllerUploadFile(workspaceId, id, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for projectControllerCreate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectControllerCreateRequest
 */
export interface ProjectsApiProjectControllerCreateRequest {
    /**
     *
     * @type {string}
     * @memberof ProjectsApiProjectControllerCreate
     */
    readonly workspaceId: string

    /**
     *
     * @type {CreateProjectDto}
     * @memberof ProjectsApiProjectControllerCreate
     */
    readonly createProjectDto: CreateProjectDto
}

/**
 * Request parameters for projectControllerDelete operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectControllerDeleteRequest
 */
export interface ProjectsApiProjectControllerDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerDelete
     */
    readonly workspaceId: number

    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerDelete
     */
    readonly projectId: number
}

/**
 * Request parameters for projectControllerDeleteUpload operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectControllerDeleteUploadRequest
 */
export interface ProjectsApiProjectControllerDeleteUploadRequest {
    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerDeleteUpload
     */
    readonly workspaceId: number

    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerDeleteUpload
     */
    readonly id: number

    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerDeleteUpload
     */
    readonly uploadId: number
}

/**
 * Request parameters for projectControllerFindMany operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectControllerFindManyRequest
 */
export interface ProjectsApiProjectControllerFindManyRequest {
    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerFindMany
     */
    readonly workspaceId: number

    /**
     *
     * @type {string}
     * @memberof ProjectsApiProjectControllerFindMany
     */
    readonly name?: string
}

/**
 * Request parameters for projectControllerFindOne operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectControllerFindOneRequest
 */
export interface ProjectsApiProjectControllerFindOneRequest {
    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerFindOne
     */
    readonly workspaceId: number

    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerFindOne
     */
    readonly projectId: number
}

/**
 * Request parameters for projectControllerUpdate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectControllerUpdateRequest
 */
export interface ProjectsApiProjectControllerUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerUpdate
     */
    readonly workspaceId: number

    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerUpdate
     */
    readonly id: number

    /**
     *
     * @type {UpdateProjectDto}
     * @memberof ProjectsApiProjectControllerUpdate
     */
    readonly updateProjectDto: UpdateProjectDto
}

/**
 * Request parameters for projectControllerUploadFile operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectControllerUploadFileRequest
 */
export interface ProjectsApiProjectControllerUploadFileRequest {
    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerUploadFile
     */
    readonly workspaceId: number

    /**
     *
     * @type {number}
     * @memberof ProjectsApiProjectControllerUploadFile
     */
    readonly id: number
}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     *
     * @param {ProjectsApiProjectControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectControllerCreate(
        requestParameters: ProjectsApiProjectControllerCreateRequest,
        options?: AxiosRequestConfig
    ) {
        return ProjectsApiFp(this.configuration)
            .projectControllerCreate(
                requestParameters.workspaceId,
                requestParameters.createProjectDto,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {ProjectsApiProjectControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectControllerDelete(
        requestParameters: ProjectsApiProjectControllerDeleteRequest,
        options?: AxiosRequestConfig
    ) {
        return ProjectsApiFp(this.configuration)
            .projectControllerDelete(
                requestParameters.workspaceId,
                requestParameters.projectId,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {ProjectsApiProjectControllerDeleteUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectControllerDeleteUpload(
        requestParameters: ProjectsApiProjectControllerDeleteUploadRequest,
        options?: AxiosRequestConfig
    ) {
        return ProjectsApiFp(this.configuration)
            .projectControllerDeleteUpload(
                requestParameters.workspaceId,
                requestParameters.id,
                requestParameters.uploadId,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {ProjectsApiProjectControllerFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectControllerFindMany(
        requestParameters: ProjectsApiProjectControllerFindManyRequest,
        options?: AxiosRequestConfig
    ) {
        return ProjectsApiFp(this.configuration)
            .projectControllerFindMany(
                requestParameters.workspaceId,
                requestParameters.name,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {ProjectsApiProjectControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectControllerFindOne(
        requestParameters: ProjectsApiProjectControllerFindOneRequest,
        options?: AxiosRequestConfig
    ) {
        return ProjectsApiFp(this.configuration)
            .projectControllerFindOne(
                requestParameters.workspaceId,
                requestParameters.projectId,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {ProjectsApiProjectControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectControllerUpdate(
        requestParameters: ProjectsApiProjectControllerUpdateRequest,
        options?: AxiosRequestConfig
    ) {
        return ProjectsApiFp(this.configuration)
            .projectControllerUpdate(
                requestParameters.workspaceId,
                requestParameters.id,
                requestParameters.updateProjectDto,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {ProjectsApiProjectControllerUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectControllerUploadFile(
        requestParameters: ProjectsApiProjectControllerUploadFileRequest,
        options?: AxiosRequestConfig
    ) {
        return ProjectsApiFp(this.configuration)
            .projectControllerUploadFile(
                requestParameters.workspaceId,
                requestParameters.id,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary
         * @param {CreateTaskDto} createTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (
            createTaskDto: CreateTaskDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createTaskDto' is not null or undefined
            assertParamExists('createTask', 'createTaskDto', createTaskDto)
            const localVarPath = `/tasks`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createTaskDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskUpload: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createTaskUpload', 'id', id)
            const localVarPath = `/tasks/{id}/uploads`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTask', 'id', id)
            const localVarPath = `/tasks/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} taskId
         * @param {number} uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskUpload: async (
            taskId: number,
            uploadId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteTaskUpload', 'taskId', taskId)
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('deleteTaskUpload', 'uploadId', uploadId)
            const localVarPath = `/tasks/{taskId}/uploads/{uploadId}`
                .replace(`{${'taskId'}}`, encodeURIComponent(String(taskId)))
                .replace(`{${'uploadId'}}`, encodeURIComponent(String(uploadId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneTask: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOneTask', 'id', id)
            const localVarPath = `/tasks/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {UpdateTaskDto} updateTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (
            id: number,
            updateTaskDto: UpdateTaskDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTask', 'id', id)
            // verify required parameter 'updateTaskDto' is not null or undefined
            assertParamExists('updateTask', 'updateTaskDto', updateTaskDto)
            const localVarPath = `/tasks/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateTaskDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary
         * @param {CreateTaskDto} createTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(
            createTaskDto: CreateTaskDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(
                createTaskDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskUpload(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskUpload(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTask(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} taskId
         * @param {number} uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskUpload(
            taskId: number,
            uploadId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskUpload(
                taskId,
                uploadId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneTask(
            id: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneTask(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {UpdateTaskDto} updateTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(
            id: number,
            updateTaskDto: UpdateTaskDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(
                id,
                updateTaskDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         *
         * @summary
         * @param {CreateTaskDto} createTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(createTaskDto: CreateTaskDto, options?: any): AxiosPromise<Task> {
            return localVarFp
                .createTask(createTaskDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskUpload(id: number, options?: any): AxiosPromise<Task> {
            return localVarFp
                .createTaskUpload(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTask(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} taskId
         * @param {number} uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskUpload(taskId: number, uploadId: number, options?: any): AxiosPromise<void> {
            return localVarFp
                .deleteTaskUpload(taskId, uploadId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneTask(id: string, options?: any): AxiosPromise<Task> {
            return localVarFp.findOneTask(id, options).then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {UpdateTaskDto} updateTaskDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(id: number, updateTaskDto: UpdateTaskDto, options?: any): AxiosPromise<void> {
            return localVarFp
                .updateTask(id, updateTaskDto, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for createTask operation in TasksApi.
 * @export
 * @interface TasksApiCreateTaskRequest
 */
export interface TasksApiCreateTaskRequest {
    /**
     *
     * @type {CreateTaskDto}
     * @memberof TasksApiCreateTask
     */
    readonly createTaskDto: CreateTaskDto
}

/**
 * Request parameters for createTaskUpload operation in TasksApi.
 * @export
 * @interface TasksApiCreateTaskUploadRequest
 */
export interface TasksApiCreateTaskUploadRequest {
    /**
     *
     * @type {number}
     * @memberof TasksApiCreateTaskUpload
     */
    readonly id: number
}

/**
 * Request parameters for deleteTask operation in TasksApi.
 * @export
 * @interface TasksApiDeleteTaskRequest
 */
export interface TasksApiDeleteTaskRequest {
    /**
     *
     * @type {number}
     * @memberof TasksApiDeleteTask
     */
    readonly id: number
}

/**
 * Request parameters for deleteTaskUpload operation in TasksApi.
 * @export
 * @interface TasksApiDeleteTaskUploadRequest
 */
export interface TasksApiDeleteTaskUploadRequest {
    /**
     *
     * @type {number}
     * @memberof TasksApiDeleteTaskUpload
     */
    readonly taskId: number

    /**
     *
     * @type {number}
     * @memberof TasksApiDeleteTaskUpload
     */
    readonly uploadId: number
}

/**
 * Request parameters for findOneTask operation in TasksApi.
 * @export
 * @interface TasksApiFindOneTaskRequest
 */
export interface TasksApiFindOneTaskRequest {
    /**
     *
     * @type {string}
     * @memberof TasksApiFindOneTask
     */
    readonly id: string
}

/**
 * Request parameters for updateTask operation in TasksApi.
 * @export
 * @interface TasksApiUpdateTaskRequest
 */
export interface TasksApiUpdateTaskRequest {
    /**
     *
     * @type {number}
     * @memberof TasksApiUpdateTask
     */
    readonly id: number

    /**
     *
     * @type {UpdateTaskDto}
     * @memberof TasksApiUpdateTask
     */
    readonly updateTaskDto: UpdateTaskDto
}

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     *
     * @summary
     * @param {TasksApiCreateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public createTask(requestParameters: TasksApiCreateTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration)
            .createTask(requestParameters.createTaskDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {TasksApiCreateTaskUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public createTaskUpload(
        requestParameters: TasksApiCreateTaskUploadRequest,
        options?: AxiosRequestConfig
    ) {
        return TasksApiFp(this.configuration)
            .createTaskUpload(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public deleteTask(requestParameters: TasksApiDeleteTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration)
            .deleteTask(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {TasksApiDeleteTaskUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public deleteTaskUpload(
        requestParameters: TasksApiDeleteTaskUploadRequest,
        options?: AxiosRequestConfig
    ) {
        return TasksApiFp(this.configuration)
            .deleteTaskUpload(requestParameters.taskId, requestParameters.uploadId, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {TasksApiFindOneTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public findOneTask(
        requestParameters: TasksApiFindOneTaskRequest,
        options?: AxiosRequestConfig
    ) {
        return TasksApiFp(this.configuration)
            .findOneTask(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {TasksApiUpdateTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public updateTask(requestParameters: TasksApiUpdateTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration)
            .updateTask(requestParameters.id, requestParameters.updateTaskDto, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * TenantsApi - axios parameter creator
 * @export
 */
export const TenantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateTenantAppDto} createTenantAppDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerCreateTenant: async (
            createTenantAppDto: CreateTenantAppDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createTenantAppDto' is not null or undefined
            assertParamExists(
                'tenantControllerCreateTenant',
                'createTenantAppDto',
                createTenantAppDto
            )
            const localVarPath = `/tenants`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createTenantAppDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {CreateTenantDto} createTenantDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerCreateTenantCMS: async (
            createTenantDto: CreateTenantDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createTenantDto' is not null or undefined
            assertParamExists('tenantControllerCreateTenantCMS', 'createTenantDto', createTenantDto)
            const localVarPath = `/tenants/cms`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createTenantDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} [name]
         * @param {string} [host]
         * @param {number} [themeId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerFindOneTenant: async (
            name?: string,
            host?: string,
            themeId?: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/tenants`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (name !== undefined) {
                localVarQueryParameter['name'] = name
            }

            if (host !== undefined) {
                localVarQueryParameter['host'] = host
            }

            if (themeId !== undefined) {
                localVarQueryParameter['themeId'] = themeId
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string} origin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerFindTenantByOrigin: async (
            origin: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'origin' is not null or undefined
            assertParamExists('tenantControllerFindTenantByOrigin', 'origin', origin)
            const localVarPath = `/tenants/by-origin`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (origin !== undefined && origin !== null) {
                localVarHeaderParameter['origin'] = String(origin)
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerGetWorkspaces: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenantControllerGetWorkspaces', 'id', id)
            const localVarPath = `/tenants/{id}/workspaces`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {UpdateTenantFromWebAppDto} updateTenantFromWebAppDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerUpdateTenant: async (
            id: number,
            updateTenantFromWebAppDto: UpdateTenantFromWebAppDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenantControllerUpdateTenant', 'id', id)
            // verify required parameter 'updateTenantFromWebAppDto' is not null or undefined
            assertParamExists(
                'tenantControllerUpdateTenant',
                'updateTenantFromWebAppDto',
                updateTenantFromWebAppDto
            )
            const localVarPath = `/tenants/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateTenantFromWebAppDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {UpdateTenantDto} updateTenantDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerUpdateTenantCMS: async (
            id: number,
            updateTenantDto: UpdateTenantDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenantControllerUpdateTenantCMS', 'id', id)
            // verify required parameter 'updateTenantDto' is not null or undefined
            assertParamExists('tenantControllerUpdateTenantCMS', 'updateTenantDto', updateTenantDto)
            const localVarPath = `/tenants/cms/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateTenantDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * TenantsApi - functional programming interface
 * @export
 */
export const TenantsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {CreateTenantAppDto} createTenantAppDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantControllerCreateTenant(
            createTenantAppDto: CreateTenantAppDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantControllerCreateTenant(
                createTenantAppDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {CreateTenantDto} createTenantDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantControllerCreateTenantCMS(
            createTenantDto: CreateTenantDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.tenantControllerCreateTenantCMS(
                    createTenantDto,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} [name]
         * @param {string} [host]
         * @param {number} [themeId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantControllerFindOneTenant(
            name?: string,
            host?: string,
            themeId?: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantControllerFindOneTenant(
                name,
                host,
                themeId,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {string} origin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantControllerFindTenantByOrigin(
            origin: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.tenantControllerFindTenantByOrigin(origin, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantControllerGetWorkspaces(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantControllerGetWorkspaces(
                id,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {UpdateTenantFromWebAppDto} updateTenantFromWebAppDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantControllerUpdateTenant(
            id: number,
            updateTenantFromWebAppDto: UpdateTenantFromWebAppDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantControllerUpdateTenant(
                id,
                updateTenantFromWebAppDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {UpdateTenantDto} updateTenantDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantControllerUpdateTenantCMS(
            id: number,
            updateTenantDto: UpdateTenantDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.tenantControllerUpdateTenantCMS(
                    id,
                    updateTenantDto,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * TenantsApi - factory interface
 * @export
 */
export const TenantsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = TenantsApiFp(configuration)
    return {
        /**
         *
         * @param {CreateTenantAppDto} createTenantAppDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerCreateTenant(
            createTenantAppDto: CreateTenantAppDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .tenantControllerCreateTenant(createTenantAppDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {CreateTenantDto} createTenantDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerCreateTenantCMS(
            createTenantDto: CreateTenantDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .tenantControllerCreateTenantCMS(createTenantDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} [name]
         * @param {string} [host]
         * @param {number} [themeId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerFindOneTenant(
            name?: string,
            host?: string,
            themeId?: number,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .tenantControllerFindOneTenant(name, host, themeId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string} origin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerFindTenantByOrigin(origin: string, options?: any): AxiosPromise<object> {
            return localVarFp
                .tenantControllerFindTenantByOrigin(origin, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerGetWorkspaces(id: number, options?: any): AxiosPromise<object> {
            return localVarFp
                .tenantControllerGetWorkspaces(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {UpdateTenantFromWebAppDto} updateTenantFromWebAppDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerUpdateTenant(
            id: number,
            updateTenantFromWebAppDto: UpdateTenantFromWebAppDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .tenantControllerUpdateTenant(id, updateTenantFromWebAppDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {UpdateTenantDto} updateTenantDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantControllerUpdateTenantCMS(
            id: number,
            updateTenantDto: UpdateTenantDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .tenantControllerUpdateTenantCMS(id, updateTenantDto, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for tenantControllerCreateTenant operation in TenantsApi.
 * @export
 * @interface TenantsApiTenantControllerCreateTenantRequest
 */
export interface TenantsApiTenantControllerCreateTenantRequest {
    /**
     *
     * @type {CreateTenantAppDto}
     * @memberof TenantsApiTenantControllerCreateTenant
     */
    readonly createTenantAppDto: CreateTenantAppDto
}

/**
 * Request parameters for tenantControllerCreateTenantCMS operation in TenantsApi.
 * @export
 * @interface TenantsApiTenantControllerCreateTenantCMSRequest
 */
export interface TenantsApiTenantControllerCreateTenantCMSRequest {
    /**
     *
     * @type {CreateTenantDto}
     * @memberof TenantsApiTenantControllerCreateTenantCMS
     */
    readonly createTenantDto: CreateTenantDto
}

/**
 * Request parameters for tenantControllerFindOneTenant operation in TenantsApi.
 * @export
 * @interface TenantsApiTenantControllerFindOneTenantRequest
 */
export interface TenantsApiTenantControllerFindOneTenantRequest {
    /**
     *
     * @type {string}
     * @memberof TenantsApiTenantControllerFindOneTenant
     */
    readonly name?: string

    /**
     *
     * @type {string}
     * @memberof TenantsApiTenantControllerFindOneTenant
     */
    readonly host?: string

    /**
     *
     * @type {number}
     * @memberof TenantsApiTenantControllerFindOneTenant
     */
    readonly themeId?: number
}

/**
 * Request parameters for tenantControllerFindTenantByOrigin operation in TenantsApi.
 * @export
 * @interface TenantsApiTenantControllerFindTenantByOriginRequest
 */
export interface TenantsApiTenantControllerFindTenantByOriginRequest {
    /**
     *
     * @type {string}
     * @memberof TenantsApiTenantControllerFindTenantByOrigin
     */
    readonly origin: string
}

/**
 * Request parameters for tenantControllerGetWorkspaces operation in TenantsApi.
 * @export
 * @interface TenantsApiTenantControllerGetWorkspacesRequest
 */
export interface TenantsApiTenantControllerGetWorkspacesRequest {
    /**
     *
     * @type {number}
     * @memberof TenantsApiTenantControllerGetWorkspaces
     */
    readonly id: number
}

/**
 * Request parameters for tenantControllerUpdateTenant operation in TenantsApi.
 * @export
 * @interface TenantsApiTenantControllerUpdateTenantRequest
 */
export interface TenantsApiTenantControllerUpdateTenantRequest {
    /**
     *
     * @type {number}
     * @memberof TenantsApiTenantControllerUpdateTenant
     */
    readonly id: number

    /**
     *
     * @type {UpdateTenantFromWebAppDto}
     * @memberof TenantsApiTenantControllerUpdateTenant
     */
    readonly updateTenantFromWebAppDto: UpdateTenantFromWebAppDto
}

/**
 * Request parameters for tenantControllerUpdateTenantCMS operation in TenantsApi.
 * @export
 * @interface TenantsApiTenantControllerUpdateTenantCMSRequest
 */
export interface TenantsApiTenantControllerUpdateTenantCMSRequest {
    /**
     *
     * @type {number}
     * @memberof TenantsApiTenantControllerUpdateTenantCMS
     */
    readonly id: number

    /**
     *
     * @type {UpdateTenantDto}
     * @memberof TenantsApiTenantControllerUpdateTenantCMS
     */
    readonly updateTenantDto: UpdateTenantDto
}

/**
 * TenantsApi - object-oriented interface
 * @export
 * @class TenantsApi
 * @extends {BaseAPI}
 */
export class TenantsApi extends BaseAPI {
    /**
     *
     * @param {TenantsApiTenantControllerCreateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public tenantControllerCreateTenant(
        requestParameters: TenantsApiTenantControllerCreateTenantRequest,
        options?: AxiosRequestConfig
    ) {
        return TenantsApiFp(this.configuration)
            .tenantControllerCreateTenant(requestParameters.createTenantAppDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {TenantsApiTenantControllerCreateTenantCMSRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public tenantControllerCreateTenantCMS(
        requestParameters: TenantsApiTenantControllerCreateTenantCMSRequest,
        options?: AxiosRequestConfig
    ) {
        return TenantsApiFp(this.configuration)
            .tenantControllerCreateTenantCMS(requestParameters.createTenantDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {TenantsApiTenantControllerFindOneTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public tenantControllerFindOneTenant(
        requestParameters: TenantsApiTenantControllerFindOneTenantRequest = {},
        options?: AxiosRequestConfig
    ) {
        return TenantsApiFp(this.configuration)
            .tenantControllerFindOneTenant(
                requestParameters.name,
                requestParameters.host,
                requestParameters.themeId,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {TenantsApiTenantControllerFindTenantByOriginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public tenantControllerFindTenantByOrigin(
        requestParameters: TenantsApiTenantControllerFindTenantByOriginRequest,
        options?: AxiosRequestConfig
    ) {
        return TenantsApiFp(this.configuration)
            .tenantControllerFindTenantByOrigin(requestParameters.origin, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {TenantsApiTenantControllerGetWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public tenantControllerGetWorkspaces(
        requestParameters: TenantsApiTenantControllerGetWorkspacesRequest,
        options?: AxiosRequestConfig
    ) {
        return TenantsApiFp(this.configuration)
            .tenantControllerGetWorkspaces(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {TenantsApiTenantControllerUpdateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public tenantControllerUpdateTenant(
        requestParameters: TenantsApiTenantControllerUpdateTenantRequest,
        options?: AxiosRequestConfig
    ) {
        return TenantsApiFp(this.configuration)
            .tenantControllerUpdateTenant(
                requestParameters.id,
                requestParameters.updateTenantFromWebAppDto,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {TenantsApiTenantControllerUpdateTenantCMSRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApi
     */
    public tenantControllerUpdateTenantCMS(
        requestParameters: TenantsApiTenantControllerUpdateTenantCMSRequest,
        options?: AxiosRequestConfig
    ) {
        return TenantsApiFp(this.configuration)
            .tenantControllerUpdateTenantCMS(
                requestParameters.id,
                requestParameters.updateTenantDto,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * UploadsApi - axios parameter creator
 * @export
 */
export const UploadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadsControllerUploadFile: async (
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/uploads`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * UploadsApi - functional programming interface
 * @export
 */
export const UploadsApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadsControllerUploadFile(
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadsControllerUploadFile(
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * UploadsApi - factory interface
 * @export
 */
export const UploadsApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = UploadsApiFp(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadsControllerUploadFile(options?: any): AxiosPromise<object> {
            return localVarFp
                .uploadsControllerUploadFile(options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * UploadsApi - object-oriented interface
 * @export
 * @class UploadsApi
 * @extends {BaseAPI}
 */
export class UploadsApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadsApi
     */
    public uploadsControllerUploadFile(options?: AxiosRequestConfig) {
        return UploadsApiFp(this.configuration)
            .uploadsControllerUploadFile(options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
export const WorkspacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary
         * @param {CreateWorkspaceDto} createWorkspaceDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneWorkspace: async (
            createWorkspaceDto: CreateWorkspaceDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createWorkspaceDto' is not null or undefined
            assertParamExists('createOneWorkspace', 'createWorkspaceDto', createWorkspaceDto)
            const localVarPath = `/workspaces`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createWorkspaceDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWorkspace', 'id', id)
            const localVarPath = `/workspaces/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} tenantId
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findManyWorkspaces: async (
            tenantId: number,
            search: string,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('findManyWorkspaces', 'tenantId', tenantId)
            // verify required parameter 'search' is not null or undefined
            assertParamExists('findManyWorkspaces', 'search', search)
            const localVarPath = `/workspaces`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneWorkspace: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOneWorkspace', 'id', id)
            const localVarPath = `/workspaces/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {UpdateWorkspacesDto} updateWorkspacesDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkspace: async (
            id: number,
            updateWorkspacesDto: UpdateWorkspacesDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWorkspace', 'id', id)
            // verify required parameter 'updateWorkspacesDto' is not null or undefined
            assertParamExists('updateWorkspace', 'updateWorkspacesDto', updateWorkspacesDto)
            const localVarPath = `/workspaces/{id}`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateWorkspacesDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * WorkspacesApi - functional programming interface
 * @export
 */
export const WorkspacesApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspacesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary
         * @param {CreateWorkspaceDto} createWorkspaceDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneWorkspace(
            createWorkspaceDto: CreateWorkspaceDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneWorkspace(
                createWorkspaceDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspace(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspace(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} tenantId
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findManyWorkspaces(
            tenantId: number,
            search: string,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findManyWorkspaces(
                tenantId,
                search,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneWorkspace(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneWorkspace(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {UpdateWorkspacesDto} updateWorkspacesDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkspace(
            id: number,
            updateWorkspacesDto: UpdateWorkspacesDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspace(
                id,
                updateWorkspacesDto,
                options
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * WorkspacesApi - factory interface
 * @export
 */
export const WorkspacesApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = WorkspacesApiFp(configuration)
    return {
        /**
         *
         * @summary
         * @param {CreateWorkspaceDto} createWorkspaceDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneWorkspace(
            createWorkspaceDto: CreateWorkspaceDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .createOneWorkspace(createWorkspaceDto, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace(id: number, options?: any): AxiosPromise<object> {
            return localVarFp
                .deleteWorkspace(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} tenantId
         * @param {string} search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findManyWorkspaces(
            tenantId: number,
            search: string,
            options?: any
        ): AxiosPromise<Array<object>> {
            return localVarFp
                .findManyWorkspaces(tenantId, search, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneWorkspace(id: number, options?: any): AxiosPromise<object> {
            return localVarFp
                .findOneWorkspace(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary
         * @param {number} id
         * @param {UpdateWorkspacesDto} updateWorkspacesDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkspace(
            id: number,
            updateWorkspacesDto: UpdateWorkspacesDto,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .updateWorkspace(id, updateWorkspacesDto, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for createOneWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiCreateOneWorkspaceRequest
 */
export interface WorkspacesApiCreateOneWorkspaceRequest {
    /**
     *
     * @type {CreateWorkspaceDto}
     * @memberof WorkspacesApiCreateOneWorkspace
     */
    readonly createWorkspaceDto: CreateWorkspaceDto
}

/**
 * Request parameters for deleteWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiDeleteWorkspaceRequest
 */
export interface WorkspacesApiDeleteWorkspaceRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesApiDeleteWorkspace
     */
    readonly id: number
}

/**
 * Request parameters for findManyWorkspaces operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiFindManyWorkspacesRequest
 */
export interface WorkspacesApiFindManyWorkspacesRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesApiFindManyWorkspaces
     */
    readonly tenantId: number

    /**
     *
     * @type {string}
     * @memberof WorkspacesApiFindManyWorkspaces
     */
    readonly search: string
}

/**
 * Request parameters for findOneWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiFindOneWorkspaceRequest
 */
export interface WorkspacesApiFindOneWorkspaceRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesApiFindOneWorkspace
     */
    readonly id: number
}

/**
 * Request parameters for updateWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiUpdateWorkspaceRequest
 */
export interface WorkspacesApiUpdateWorkspaceRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesApiUpdateWorkspace
     */
    readonly id: number

    /**
     *
     * @type {UpdateWorkspacesDto}
     * @memberof WorkspacesApiUpdateWorkspace
     */
    readonly updateWorkspacesDto: UpdateWorkspacesDto
}

/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
export class WorkspacesApi extends BaseAPI {
    /**
     *
     * @summary
     * @param {WorkspacesApiCreateOneWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    public createOneWorkspace(
        requestParameters: WorkspacesApiCreateOneWorkspaceRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesApiFp(this.configuration)
            .createOneWorkspace(requestParameters.createWorkspaceDto, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {WorkspacesApiDeleteWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    public deleteWorkspace(
        requestParameters: WorkspacesApiDeleteWorkspaceRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesApiFp(this.configuration)
            .deleteWorkspace(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {WorkspacesApiFindManyWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    public findManyWorkspaces(
        requestParameters: WorkspacesApiFindManyWorkspacesRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesApiFp(this.configuration)
            .findManyWorkspaces(requestParameters.tenantId, requestParameters.search, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {WorkspacesApiFindOneWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    public findOneWorkspace(
        requestParameters: WorkspacesApiFindOneWorkspaceRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesApiFp(this.configuration)
            .findOneWorkspace(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary
     * @param {WorkspacesApiUpdateWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    public updateWorkspace(
        requestParameters: WorkspacesApiUpdateWorkspaceRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesApiFp(this.configuration)
            .updateWorkspace(requestParameters.id, requestParameters.updateWorkspacesDto, options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * WorkspacesPeopleApi - axios parameter creator
 * @export
 */
export const WorkspacesPeopleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacePeopleControllerFindOneUser: async (
            userId: number,
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workspacePeopleControllerFindOneUser', 'userId', userId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workspacePeopleControllerFindOneUser', 'id', id)
            const localVarPath = `/workspaces/{id}/people/{userId}`
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacePeopleControllerFindPeople: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workspacePeopleControllerFindPeople', 'id', id)
            const localVarPath = `/workspaces/{id}/people`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacePeopleControllerRecommendPeer: async (
            userId: number,
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workspacePeopleControllerRecommendPeer', 'userId', userId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workspacePeopleControllerRecommendPeer', 'id', id)
            const localVarPath = `/workspaces/{id}/recommended/{userId}`
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {SendMessageDto} sendMessageDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacePeopleControllerSendMessage: async (
            userId: number,
            id: number,
            sendMessageDto: SendMessageDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workspacePeopleControllerSendMessage', 'userId', userId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workspacePeopleControllerSendMessage', 'id', id)
            // verify required parameter 'sendMessageDto' is not null or undefined
            assertParamExists(
                'workspacePeopleControllerSendMessage',
                'sendMessageDto',
                sendMessageDto
            )
            const localVarPath = `/workspaces/{id}/message/{userId}`
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                sendMessageDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * WorkspacesPeopleApi - functional programming interface
 * @export
 */
export const WorkspacesPeopleApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspacesPeopleApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspacePeopleControllerFindOneUser(
            userId: number,
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.workspacePeopleControllerFindOneUser(
                    userId,
                    id,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspacePeopleControllerFindPeople(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.workspacePeopleControllerFindPeople(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspacePeopleControllerRecommendPeer(
            userId: number,
            id: number,
            options?: AxiosRequestConfig
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SanitizedExpertDto>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.workspacePeopleControllerRecommendPeer(
                    userId,
                    id,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {SendMessageDto} sendMessageDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspacePeopleControllerSendMessage(
            userId: number,
            id: number,
            sendMessageDto: SendMessageDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.workspacePeopleControllerSendMessage(
                    userId,
                    id,
                    sendMessageDto,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * WorkspacesPeopleApi - factory interface
 * @export
 */
export const WorkspacesPeopleApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = WorkspacesPeopleApiFp(configuration)
    return {
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacePeopleControllerFindOneUser(
            userId: number,
            id: number,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .workspacePeopleControllerFindOneUser(userId, id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacePeopleControllerFindPeople(
            id: number,
            options?: any
        ): AxiosPromise<Array<object>> {
            return localVarFp
                .workspacePeopleControllerFindPeople(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacePeopleControllerRecommendPeer(
            userId: number,
            id: number,
            options?: any
        ): AxiosPromise<Array<SanitizedExpertDto>> {
            return localVarFp
                .workspacePeopleControllerRecommendPeer(userId, id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {SendMessageDto} sendMessageDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacePeopleControllerSendMessage(
            userId: number,
            id: number,
            sendMessageDto: SendMessageDto,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .workspacePeopleControllerSendMessage(userId, id, sendMessageDto, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for workspacePeopleControllerFindOneUser operation in WorkspacesPeopleApi.
 * @export
 * @interface WorkspacesPeopleApiWorkspacePeopleControllerFindOneUserRequest
 */
export interface WorkspacesPeopleApiWorkspacePeopleControllerFindOneUserRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesPeopleApiWorkspacePeopleControllerFindOneUser
     */
    readonly userId: number

    /**
     *
     * @type {number}
     * @memberof WorkspacesPeopleApiWorkspacePeopleControllerFindOneUser
     */
    readonly id: number
}

/**
 * Request parameters for workspacePeopleControllerFindPeople operation in WorkspacesPeopleApi.
 * @export
 * @interface WorkspacesPeopleApiWorkspacePeopleControllerFindPeopleRequest
 */
export interface WorkspacesPeopleApiWorkspacePeopleControllerFindPeopleRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesPeopleApiWorkspacePeopleControllerFindPeople
     */
    readonly id: number
}

/**
 * Request parameters for workspacePeopleControllerRecommendPeer operation in WorkspacesPeopleApi.
 * @export
 * @interface WorkspacesPeopleApiWorkspacePeopleControllerRecommendPeerRequest
 */
export interface WorkspacesPeopleApiWorkspacePeopleControllerRecommendPeerRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesPeopleApiWorkspacePeopleControllerRecommendPeer
     */
    readonly userId: number

    /**
     *
     * @type {number}
     * @memberof WorkspacesPeopleApiWorkspacePeopleControllerRecommendPeer
     */
    readonly id: number
}

/**
 * Request parameters for workspacePeopleControllerSendMessage operation in WorkspacesPeopleApi.
 * @export
 * @interface WorkspacesPeopleApiWorkspacePeopleControllerSendMessageRequest
 */
export interface WorkspacesPeopleApiWorkspacePeopleControllerSendMessageRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesPeopleApiWorkspacePeopleControllerSendMessage
     */
    readonly userId: number

    /**
     *
     * @type {number}
     * @memberof WorkspacesPeopleApiWorkspacePeopleControllerSendMessage
     */
    readonly id: number

    /**
     *
     * @type {SendMessageDto}
     * @memberof WorkspacesPeopleApiWorkspacePeopleControllerSendMessage
     */
    readonly sendMessageDto: SendMessageDto
}

/**
 * WorkspacesPeopleApi - object-oriented interface
 * @export
 * @class WorkspacesPeopleApi
 * @extends {BaseAPI}
 */
export class WorkspacesPeopleApi extends BaseAPI {
    /**
     *
     * @param {WorkspacesPeopleApiWorkspacePeopleControllerFindOneUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesPeopleApi
     */
    public workspacePeopleControllerFindOneUser(
        requestParameters: WorkspacesPeopleApiWorkspacePeopleControllerFindOneUserRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesPeopleApiFp(this.configuration)
            .workspacePeopleControllerFindOneUser(
                requestParameters.userId,
                requestParameters.id,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {WorkspacesPeopleApiWorkspacePeopleControllerFindPeopleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesPeopleApi
     */
    public workspacePeopleControllerFindPeople(
        requestParameters: WorkspacesPeopleApiWorkspacePeopleControllerFindPeopleRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesPeopleApiFp(this.configuration)
            .workspacePeopleControllerFindPeople(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {WorkspacesPeopleApiWorkspacePeopleControllerRecommendPeerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesPeopleApi
     */
    public workspacePeopleControllerRecommendPeer(
        requestParameters: WorkspacesPeopleApiWorkspacePeopleControllerRecommendPeerRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesPeopleApiFp(this.configuration)
            .workspacePeopleControllerRecommendPeer(
                requestParameters.userId,
                requestParameters.id,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {WorkspacesPeopleApiWorkspacePeopleControllerSendMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesPeopleApi
     */
    public workspacePeopleControllerSendMessage(
        requestParameters: WorkspacesPeopleApiWorkspacePeopleControllerSendMessageRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesPeopleApiFp(this.configuration)
            .workspacePeopleControllerSendMessage(
                requestParameters.userId,
                requestParameters.id,
                requestParameters.sendMessageDto,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * WorkspacesUserManagementApi - axios parameter creator
 * @export
 */
export const WorkspacesUserManagementApiAxiosParamCreator = function (
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {number} workspaceId
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesUsersControllerDelete: async (
            workspaceId: number,
            userId: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('workspacesUsersControllerDelete', 'workspaceId', workspaceId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workspacesUsersControllerDelete', 'userId', userId)
            const localVarPath = `/workspaces/{workspaceId}/users/{userId}`
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesUsersControllerFindOneUser: async (
            userId: number,
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workspacesUsersControllerFindOneUser', 'userId', userId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workspacesUsersControllerFindOneUser', 'id', id)
            const localVarPath = `/workspaces/{id}/users/{userId}`
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
                .replace(`{${'id'}}`, encodeURIComponent(String(id)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesUsersControllerFindUsers: async (
            id: number,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workspacesUsersControllerFindUsers', 'id', id)
            const localVarPath = `/workspaces/{id}/users`.replace(
                `{${'id'}}`,
                encodeURIComponent(String(id))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} userId
         * @param {UpdateUserRoleDto} updateUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesUsersControllerUpdate: async (
            workspaceId: number,
            userId: number,
            updateUserRoleDto: UpdateUserRoleDto,
            options: AxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('workspacesUsersControllerUpdate', 'workspaceId', workspaceId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('workspacesUsersControllerUpdate', 'userId', userId)
            // verify required parameter 'updateUserRoleDto' is not null or undefined
            assertParamExists(
                'workspacesUsersControllerUpdate',
                'updateUserRoleDto',
                updateUserRoleDto
            )
            const localVarPath = `/workspaces/{workspaceId}/users/{userId}`
                .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                updateUserRoleDto,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * WorkspacesUserManagementApi - functional programming interface
 * @export
 */
export const WorkspacesUserManagementApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspacesUserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {number} workspaceId
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspacesUsersControllerDelete(
            workspaceId: number,
            userId: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.workspacesUsersControllerDelete(
                    workspaceId,
                    userId,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspacesUsersControllerFindOneUser(
            userId: number,
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.workspacesUsersControllerFindOneUser(
                    userId,
                    id,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspacesUsersControllerFindUsers(
            id: number,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.workspacesUsersControllerFindUsers(id, options)
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} userId
         * @param {UpdateUserRoleDto} updateUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspacesUsersControllerUpdate(
            workspaceId: number,
            userId: number,
            updateUserRoleDto: UpdateUserRoleDto,
            options?: AxiosRequestConfig
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.workspacesUsersControllerUpdate(
                    workspaceId,
                    userId,
                    updateUserRoleDto,
                    options
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * WorkspacesUserManagementApi - factory interface
 * @export
 */
export const WorkspacesUserManagementApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = WorkspacesUserManagementApiFp(configuration)
    return {
        /**
         *
         * @param {number} workspaceId
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesUsersControllerDelete(
            workspaceId: number,
            userId: number,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .workspacesUsersControllerDelete(workspaceId, userId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} userId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesUsersControllerFindOneUser(
            userId: number,
            id: number,
            options?: any
        ): AxiosPromise<object> {
            return localVarFp
                .workspacesUsersControllerFindOneUser(userId, id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesUsersControllerFindUsers(id: number, options?: any): AxiosPromise<Array<object>> {
            return localVarFp
                .workspacesUsersControllerFindUsers(id, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {number} workspaceId
         * @param {number} userId
         * @param {UpdateUserRoleDto} updateUserRoleDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesUsersControllerUpdate(
            workspaceId: number,
            userId: number,
            updateUserRoleDto: UpdateUserRoleDto,
            options?: any
        ): AxiosPromise<void> {
            return localVarFp
                .workspacesUsersControllerUpdate(workspaceId, userId, updateUserRoleDto, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * Request parameters for workspacesUsersControllerDelete operation in WorkspacesUserManagementApi.
 * @export
 * @interface WorkspacesUserManagementApiWorkspacesUsersControllerDeleteRequest
 */
export interface WorkspacesUserManagementApiWorkspacesUsersControllerDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesUserManagementApiWorkspacesUsersControllerDelete
     */
    readonly workspaceId: number

    /**
     *
     * @type {number}
     * @memberof WorkspacesUserManagementApiWorkspacesUsersControllerDelete
     */
    readonly userId: number
}

/**
 * Request parameters for workspacesUsersControllerFindOneUser operation in WorkspacesUserManagementApi.
 * @export
 * @interface WorkspacesUserManagementApiWorkspacesUsersControllerFindOneUserRequest
 */
export interface WorkspacesUserManagementApiWorkspacesUsersControllerFindOneUserRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesUserManagementApiWorkspacesUsersControllerFindOneUser
     */
    readonly userId: number

    /**
     *
     * @type {number}
     * @memberof WorkspacesUserManagementApiWorkspacesUsersControllerFindOneUser
     */
    readonly id: number
}

/**
 * Request parameters for workspacesUsersControllerFindUsers operation in WorkspacesUserManagementApi.
 * @export
 * @interface WorkspacesUserManagementApiWorkspacesUsersControllerFindUsersRequest
 */
export interface WorkspacesUserManagementApiWorkspacesUsersControllerFindUsersRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesUserManagementApiWorkspacesUsersControllerFindUsers
     */
    readonly id: number
}

/**
 * Request parameters for workspacesUsersControllerUpdate operation in WorkspacesUserManagementApi.
 * @export
 * @interface WorkspacesUserManagementApiWorkspacesUsersControllerUpdateRequest
 */
export interface WorkspacesUserManagementApiWorkspacesUsersControllerUpdateRequest {
    /**
     *
     * @type {number}
     * @memberof WorkspacesUserManagementApiWorkspacesUsersControllerUpdate
     */
    readonly workspaceId: number

    /**
     *
     * @type {number}
     * @memberof WorkspacesUserManagementApiWorkspacesUsersControllerUpdate
     */
    readonly userId: number

    /**
     *
     * @type {UpdateUserRoleDto}
     * @memberof WorkspacesUserManagementApiWorkspacesUsersControllerUpdate
     */
    readonly updateUserRoleDto: UpdateUserRoleDto
}

/**
 * WorkspacesUserManagementApi - object-oriented interface
 * @export
 * @class WorkspacesUserManagementApi
 * @extends {BaseAPI}
 */
export class WorkspacesUserManagementApi extends BaseAPI {
    /**
     *
     * @param {WorkspacesUserManagementApiWorkspacesUsersControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesUserManagementApi
     */
    public workspacesUsersControllerDelete(
        requestParameters: WorkspacesUserManagementApiWorkspacesUsersControllerDeleteRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesUserManagementApiFp(this.configuration)
            .workspacesUsersControllerDelete(
                requestParameters.workspaceId,
                requestParameters.userId,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {WorkspacesUserManagementApiWorkspacesUsersControllerFindOneUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesUserManagementApi
     */
    public workspacesUsersControllerFindOneUser(
        requestParameters: WorkspacesUserManagementApiWorkspacesUsersControllerFindOneUserRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesUserManagementApiFp(this.configuration)
            .workspacesUsersControllerFindOneUser(
                requestParameters.userId,
                requestParameters.id,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {WorkspacesUserManagementApiWorkspacesUsersControllerFindUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesUserManagementApi
     */
    public workspacesUsersControllerFindUsers(
        requestParameters: WorkspacesUserManagementApiWorkspacesUsersControllerFindUsersRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesUserManagementApiFp(this.configuration)
            .workspacesUsersControllerFindUsers(requestParameters.id, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {WorkspacesUserManagementApiWorkspacesUsersControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesUserManagementApi
     */
    public workspacesUsersControllerUpdate(
        requestParameters: WorkspacesUserManagementApiWorkspacesUsersControllerUpdateRequest,
        options?: AxiosRequestConfig
    ) {
        return WorkspacesUserManagementApiFp(this.configuration)
            .workspacesUsersControllerUpdate(
                requestParameters.workspaceId,
                requestParameters.userId,
                requestParameters.updateUserRoleDto,
                options
            )
            .then((request) => request(this.axios, this.basePath))
    }
}
